{
    "info": {
        "termsOfService": "http://swagger.io/terms/", 
        "description": "VMware vCenter Server provides a centralized platform for managing your VMware vSphere environments", 
        "title": "vcenter"
    }, 
    "paths": {
        "/com/vmware/vcenter/inventory/datastore?~action=find": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information.", 
                        "schema": {}
                    }, 
                    "404": {
                        "description": "if no datastore can be found for one or more of the datastore identifiers in {@param.name datastores}", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [], 
                "tags": [
                    "inventory/datastore "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Returns datastore information for the specified datastores. The key in the {@term result} {@term map} is the datastore identifier and the value in the {@term map} is the datastore information."
            }
        }, 
        "/com/vmware/vcenter/inventory/network?~action=find": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Network information for the specified vCenter Server networks. The key in the {@term result} {@term map} is the network identifier and the value in the {@term map} is the network information.", 
                        "schema": {}
                    }, 
                    "404": {
                        "description": "if no datastore can be found for one or more of the vCenter Server network identifiers in {@param.name networks}", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [], 
                "tags": [
                    "inventory/network "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Returns network information for the specified vCenter Server networks. The key in the {@term result} {@term map} is the network identifier and the value in the {@term map} is the network information."
            }
        }, 
        "/com/vmware/vcenter/iso/image/id:{library_item}?~action=mount": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created virtual CD-ROM backed by the specified ISO image.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "404": {
                        "description": "If either {@param.name vm} or the {@param.name libraryItem} is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The identifier of the library item having the ISO image to mount on the virtual machine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "library_item", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "iso/image "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Mounts an ISO image from a content library on a virtual machine."
            }
        }, 
        "/com/vmware/vcenter/iso/image/id:{vm}?~action=unmount": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "When the operation is not allowed on the virtual machine in its current state.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_allowed_in_current_state"
                        }
                    }, 
                    "404": {
                        "description": "If the virtual machine identified by {@param.name vm} is not found or the {@param.name cdrom} does not identify a virtual CD-ROM in the virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The identifier of the virtual machine from which to unmount the virtual CD-ROM.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "iso/image "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Unmounts a previously mounted CD-ROM using an ISO image as a backing."
            }
        }, 
        "/com/vmware/vcenter/ovf/export-flag": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A {@term list} of supported export flags.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.ovf.export_flag.info"
                            }, 
                            "type": "array"
                        }
                    }
                }, 
                "parameters": [], 
                "tags": [
                    "ovf/export_flag "
                ], 
                "summary": "Returns information about the supported export flags by the server. <p> The supported flags are: <dl> <dt>PRESERVE_MAC</dt> <dd>Include MAC addresses for network adapters.</dd> <dt>EXTRA_CONFIG</dt> <dd>Include extra configuration in OVF export.</dd> </dl> <p> Future server versions might support additional flags."
            }
        }, 
        "/com/vmware/vcenter/ovf/import-flag": {
            "get": {
                "responses": {
                    "200": {
                        "description": "A {@term list} of supported import flags.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.ovf.import_flag.info"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "404": {
                        "description": "If the resource pool associated with {@param.name rp} does not exist.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [], 
                "tags": [
                    "ovf/import_flag "
                ], 
                "summary": "Returns information about the import flags supported by the deployment platform. <p> The supported flags are: <dl> <dt>LAX</dt> <dd>Lax mode parsing of the OVF descriptor.</dd> </dl> <p> Future server versions might support additional flags."
            }
        }, 
        "/com/vmware/vcenter/ovf/library-item": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the {@term operation}, along with the details of the result or failure.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.create_result"
                        }
                    }, 
                    "400": {
                        "description": "if the specified virtual machine or virtual appliance is busy.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_busy"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual appliance specified by {@param.name source} does not exist.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item_create"
                        }, 
                        "required": true, 
                        "name": "client_token,source,target,create_spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "ovf/library_item "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Creates a library item in content library from a virtual machine or virtual appliance. <p> This {@term operation} creates a library item in content library whose content is an OVF package derived from a source virtual machine or virtual appliance, using the supplied create specification. The OVF package may be stored as in a newly created library item or in an in an existing library item. For an existing library item whose content is updated by this {@term operation}, the original content is overwritten. </p>"
            }
        }, 
        "/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=deploy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Information about the success or failure of the {@term operation}, along with the details of the result or failure.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.deployment_result"
                        }
                    }, 
                    "400": {
                        "description": "if there was an error accessing the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "403": {
                        "description": "if you do not have all of the privileges described as follows : <ul> <li>{@term Operation} execution requires VirtualMachine.Config.AddNewDisk if the OVF descriptor has a disk drive (type 17) section. </li> <li>{@term Operation} execution requires VirtualMachine.Config.AdvancedConfig if the OVF descriptor has an ExtraConfig section. </li> <li>{@term Operation} execution requires Extension.Register for specified resource group if the OVF descriptor has a vServiceDependency section. </li> <li>{@term Operation} execution requires Network.Assign for target network if specified. </li> <li>{@term Operation} execution requires Datastore.AllocateSpace for target datastore if specified. </li> </ul>", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the library item specified by {@param.name ovfLibraryItemId} does not exist.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the content library item containing the OVF package to be deployed.", 
                        "required": true, 
                        "type": "string", 
                        "name": "ovf_library_item_id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item_deploy"
                        }, 
                        "required": true, 
                        "name": "client_token,target,deployment_spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "ovf/library_item "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Deploys an OVF package stored in content library to a newly created virtual machine or virtual appliance. <p> This {@term operation} deploys an OVF package which is stored in the library item specified by {@param.name ovfLibraryItemId}. It uses the deployment specification in {@param.name deploymentSpec} to deploy the OVF package to the location specified by {@param.name target}. </p>"
            }
        }, 
        "/com/vmware/vcenter/ovf/library-item/id:{ovf_library_item_id}?~action=filter": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Information that can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec}) when deploying the OVF package to the deployment target specified by {@param.name target}.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.ovf_summary"
                        }
                    }, 
                    "400": {
                        "description": "if there was an error accessing the OVF package at the specified {@param.name ovfLibraryItemId}.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "404": {
                        "description": "if the library item specified by {@param.name ovfLibraryItemId} does not exist.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the content library item containing the OVF package to query.", 
                        "required": true, 
                        "type": "string", 
                        "name": "ovf_library_item_id", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item_filter"
                        }, 
                        "required": true, 
                        "name": "target", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "ovf/library_item "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Queries an OVF package stored in content library to retrieve information to use when deploying the package. See {@link #deploy}. <p> This {@term operation} retrieves information from the descriptor of the OVF package stored in the library item specified by {@param.name ovfLibraryItemId}. The information returned by the {@term operation} can be used to populate the deployment specification (see {@link ResourcePoolDeploymentSpec} when deploying the OVF package to the deployment target specified by {@param.name target}. </p>"
            }
        }, 
        "/vcenter/cluster": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the clusters matching the Cluster.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.cluster.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 clusters match the Cluster.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Folders that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "Identifiers of clusters that can match the filter.\nIf unset or empty, clusters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.clusters"
                    }, 
                    {
                        "description": "Names that clusters must have to match the filter (see Cluster.Info.name).\nIf unset or empty, clusters with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }, 
                    {
                        "description": "Datacenters that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }
                ], 
                "tags": [
                    "cluster "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) clusters in vCenter matching the Cluster.FilterSpec."
            }
        }, 
        "/vcenter/cluster/{cluster}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The Cluster.Info instances that corresponds to the cluster.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.cluster.info"
                        }
                    }, 
                    "401": {
                        "description": "if the session id is missing from the request or the corresponding session object cannot be found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't not have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if there is no cluster associated with cluster in the system.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the cluster.\nThe parameter must be an identifier for the resource type: ClusterComputeResource.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cluster", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "cluster "
                ], 
                "summary": "Retrieves information about the cluster corresponding to cluster."
            }
        }, 
        "/vcenter/datacenter": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The identifier of the newly created datacenter\nThe result will be an identifier for the resource type: Datacenter.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the datacenter name is empty or invalid as per the underlying implementation.\nif the folder is not specified and the system cannot choose a suitable one.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.invalid_argument"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the datacenter folder cannot be found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.datacenter_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "datacenter "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Create a new datacenter in the vCenter inventory"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datacenters matching the Datacenter.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.datacenter.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 datacenters match the Datacenter.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Folders that must contain the datacenters for the datacenter to match the filter.\nIf unset or empty, datacenters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "Identifiers of datacenters that can match the filter.\nIf unset or empty, datacenters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }, 
                    {
                        "description": "Names that datacenters must have to match the filter (see Datacenter.Info.name).\nIf unset or empty, datacenters with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }
                ], 
                "tags": [
                    "datacenter "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) datacenters in vCenter matching the Datacenter.FilterSpec."
            }
        }, 
        "/vcenter/datacenter/{datacenter}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "The Datacenter.Info instances that corresponds to the datacenter.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.datacenter.info"
                        }
                    }, 
                    "400": {
                        "description": "if the system reports an error while responding to the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.error"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if there is no datacenter associated with datacenter in the system.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the datacenter.\nThe parameter must be an identifier for the resource type: Datacenter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "datacenter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "datacenter "
                ], 
                "summary": "Retrieves information about the datacenter corresponding to datacenter."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the datacenter associated with datacenter is not empty.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_in_use"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if there is no datacenter associated with datacenter in the system.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the datacenter to be deleted.\nThe parameter must be an identifier for the resource type: Datacenter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "datacenter", 
                        "in": "path"
                    }, 
                    {
                        "description": "If true, delete the datacenter even if it is not empty.\nIf unset a ResourceInUse error will be reported if the datacenter is not empty. This is the equivalent of passing the value false.", 
                        "required": false, 
                        "type": "boolean", 
                        "name": "force", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "datacenter "
                ], 
                "summary": "Delete an empty datacenter from the vCenter Server"
            }
        }, 
        "/vcenter/datastore": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the datastores matching the Datastore.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.datastore.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 datastores match the Datastore.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifiers of datastores that can match the filter.\nIf unset or empty, datastores with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datastores"
                    }, 
                    {
                        "description": "Folders that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "Names that datastores must have to match the filter (see Datastore.Info.name).\nIf unset or empty, datastores with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }, 
                    {
                        "description": "Types that datastores must have to match the filter (see Datastore.Summary.type).\nIf unset or empty, datastores with any type match the filter.", 
                        "items": {
                            "$ref": "#/definitions/com.vmware.vcenter.datastore.type"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.types"
                    }, 
                    {
                        "description": "Datacenters that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }
                ], 
                "tags": [
                    "datastore "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) datastores in vCenter matching the Datastore.FilterSpec."
            }
        }, 
        "/vcenter/datastore/{datastore}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "information about the datastore.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.datastore.info"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the datastore indicated by datastore does not exist.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the datastore for which information should be retrieved.\nThe parameter must be an identifier for the resource type: Datastore.", 
                        "required": true, 
                        "type": "string", 
                        "name": "datastore", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "datastore "
                ], 
                "summary": "Retrieves information about the datastore indicated by datastore."
            }
        }, 
        "/vcenter/folder": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the folders matching the Folder.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.folder.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 folders match the Folder.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifiers of folders that can match the filter.\nIf unset or empty, folders with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "Folders that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.parent_folders"
                    }, 
                    {
                        "description": "The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder.", 
                        "enum": [
                            "DATACENTER", 
                            "DATASTORE", 
                            "HOST", 
                            "NETWORK", 
                            "VIRTUAL_MACHINE"
                        ], 
                        "type": "string", 
                        "name": "filter.type", 
                        "in": "query"
                    }, 
                    {
                        "description": "Names that folders must have to match the filter (see Folder.Summary.name).\nIf unset or empty, folders with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }, 
                    {
                        "description": "Datacenters that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }
                ], 
                "tags": [
                    "folder "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) folders in vCenter matching the Folder.FilterSpec."
            }
        }, 
        "/vcenter/host": {
            "post": {
                "responses": {
                    "200": {
                        "description": "The newly created identifier of the host in vCenter.\nThe result will be an identifier for the resource type: HostSystem.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the software version on the host is not supported.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user name or password for the administration account on the host are invalid.\nif the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.host_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "host "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Add a new standalone host in the vCenter inventory. The newly connected host will be in connected state. The vCenter Server will verify the SSL certificate before adding the host to its inventory. In the case where the SSL certificate cannot be verified because the Certificate Authority is not recognized or the certificate is self signed, the vCenter Server will fall back to thumbprint verification mode as defined by Host.CreateSpec.ThumbprintVerification."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the hosts matching the Host.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.host.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 hosts match the Host.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Folders that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter.\nIf unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter.", 
                        "type": "boolean", 
                        "name": "filter.standalone", 
                        "in": "query"
                    }, 
                    {
                        "description": "Identifiers of hosts that can match the filter.\nIf unset or empty, hosts with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.hosts"
                    }, 
                    {
                        "description": "Names that hosts must have to match the filter (see Host.Summary.name).\nIf unset or empty, hosts with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }, 
                    {
                        "description": "Clusters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.clusters"
                    }, 
                    {
                        "description": "Datacenters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }, 
                    {
                        "description": "Connection states that a host must be in to match the filter (see Host.Summary.connection-state.\nIf unset or empty, hosts in any connection state match the filter.", 
                        "items": {
                            "$ref": "#/definitions/com.vmware.vcenter.host.connection_state"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.connection_states"
                    }
                ], 
                "tags": [
                    "host "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) hosts in vCenter matching the Host.FilterSpec."
            }
        }, 
        "/vcenter/host/{host}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the host associated with host is in a vCenter cluster", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_in_use"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if there is no host associated with host in the system.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the host to be deleted.\nThe parameter must be an identifier for the resource type: HostSystem.", 
                        "required": true, 
                        "type": "string", 
                        "name": "host", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "host "
                ], 
                "summary": "Remove a standalone host from the vCenter Server."
            }
        }, 
        "/vcenter/host/{host}/connect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the system reports an error while responding to the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.error"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if there is no host associated with host in the system.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the host to be reconnected.\nThe parameter must be an identifier for the resource type: HostSystem.", 
                        "required": true, 
                        "type": "string", 
                        "name": "host", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "host "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Connect to the host corresponding to host previously added to the vCenter server."
            }
        }, 
        "/vcenter/host/{host}/disconnect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the system reports an error while responding to the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.error"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if there is no host associated with host in the system.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the host to be disconnected.\nThe parameter must be an identifier for the resource type: HostSystem.", 
                        "required": true, 
                        "type": "string", 
                        "name": "host", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "host "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Disconnect the host corresponding to host from the vCenter server"
            }
        }, 
        "/vcenter/network": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the networks matching the Network.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.network.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 networks match the Network.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Folders that must contain the network for the network to match the filter.\nIf unset or empty, networks in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "Datacenters that must contain the network for the network to match the filter.\nIf unset or empty, networks in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }, 
                    {
                        "description": "Identifiers of networks that can match the filter.\nIf unset or empty, networks with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.networks"
                    }, 
                    {
                        "description": "Types that networks must have to match the filter (see Network.Summary.type).\nIf unset, networks with any type match the filter.", 
                        "items": {
                            "$ref": "#/definitions/com.vmware.vcenter.network.type"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.types"
                    }, 
                    {
                        "description": "Names that networks must have to match the filter (see Network.Summary.name).\nIf unset or empty, networks with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }
                ], 
                "tags": [
                    "network "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) networks in vCenter matching the Network.FilterSpec."
            }
        }, 
        "/vcenter/resource-pool": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the resource pools matching the ResourcePool.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.resource_pool.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 resource pools match the ResourcePool.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Resource pools that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.parent_resource_pools"
                    }, 
                    {
                        "description": "Hosts that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.hosts"
                    }, 
                    {
                        "description": "Names that resource pools must have to match the filter (see ResourcePool.Info.name).\nIf unset or empty, resource pools with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }, 
                    {
                        "description": "Clusters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.clusters"
                    }, 
                    {
                        "description": "Datacenters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }, 
                    {
                        "description": "Identifiers of resource pools that can match the filter.\nIf unset or empty, resource pools with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.resource_pools"
                    }
                ], 
                "tags": [
                    "resource_pool "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) resource pools in vCenter matching the ResourcePool.FilterSpec."
            }
        }, 
        "/vcenter/resource-pool/{resource_pool}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "information about the resource pool.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.resource_pool.info"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the resource pool indicated by resourcePool does not exist.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Identifier of the resource pool for which information should be retrieved.\nThe parameter must be an identifier for the resource type: ResourcePool.", 
                        "required": true, 
                        "type": "string", 
                        "name": "resource-pool", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "resource_pool "
                ], 
                "summary": "Retrieves information about the resource pool indicated by resourcePool."
            }
        }, 
        "/vcenter/vm": {
            "post": {
                "responses": {
                    "200": {
                        "description": "ID of newly-created virtual machine.\nThe result will be an identifier for the resource type: VirtualMachine.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if VM.CreateSpec.guest-os is not supported for the requested virtual hardware version and spec includes unset fields that default to guest-specific values.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if any of the resources specified in spec could not be found", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.VM_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "VM "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Creates a virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Commonly used information about the virtual machines matching the VM.FilterSpec.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.VM.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if more than 1000 virtual machines match the VM.FilterSpec.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unable_to_allocate_resource"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Folders that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.folders"
                    }, 
                    {
                        "description": "Power states that a virtual machine must be in to match the filter (see Power.Info.state.\nIf unset or empty, virtual machines in any power state match the filter.", 
                        "items": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.power.state"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.power_states"
                    }, 
                    {
                        "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines on any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.hosts"
                    }, 
                    {
                        "description": "Names that virtual machines must have to match the filter (see VM.Info.name).\nIf unset or empty, virtual machines with any name match the filter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.names"
                    }, 
                    {
                        "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.clusters"
                    }, 
                    {
                        "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.datacenters"
                    }, 
                    {
                        "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.resource_pools"
                    }, 
                    {
                        "description": "Identifiers of virtual machines that can match the filter.\nIf unset or empty, virtual machines with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine.", 
                        "items": {
                            "type": "string"
                        }, 
                        "collectionFormat": "multi", 
                        "in": "query", 
                        "type": "array", 
                        "name": "filter.vms"
                    }
                ], 
                "tags": [
                    "VM "
                ], 
                "summary": "Returns information about at most 1000 visible (subject to permission checks) virtual machines in vCenter matching the VM.FilterSpec."
            }
        }, 
        "/vcenter/vm/{vm}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "VM "
                ], 
                "summary": "Deletes a virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.VM.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "VM "
                ], 
                "summary": "Returns information about a virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Virtual hardware settings of the virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware "
                ], 
                "summary": "Returns the virtual hardware settings of a virtual machine."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the virtual hardware settings of a virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/action/upgrade": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware_upgrade"
                        }, 
                        "name": "version", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Upgrades the virtual machine to a newer virtual hardware version."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/adapter/sata": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual SATA adapter identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/sata "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual SATA adapter to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SATA adapters.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/sata "
                ], 
                "summary": "Returns commonly used information about the virtual SATA adapters belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/adapter/sata/{adapter}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual SATA adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "adapter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/sata "
                ], 
                "summary": "Removes a virtual SATA adapter from the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SATA adapter.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual SATA adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual SATA adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "adapter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/sata "
                ], 
                "summary": "Returns information about a virtual SATA adapter."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/adapter/scsi": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual SCSI adapter identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/scsi "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual SCSI adapter to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual SCSI adapters.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/scsi "
                ], 
                "summary": "Returns commonly used information about the virtual SCSI adapters belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/adapter/scsi/{adapter}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual SCSI adapter.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual SCSI adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "adapter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/scsi "
                ], 
                "summary": "Returns information about a virtual SCSI adapter."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual SCSI adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "adapter", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/scsi "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual SCSI adapter."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual SCSI adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual SCSI adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter.", 
                        "required": true, 
                        "type": "string", 
                        "name": "adapter", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/adapter/scsi "
                ], 
                "summary": "Removes a virtual SCSI adapter from the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/boot": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Boot-related settings of the virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/boot "
                ], 
                "summary": "Returns the boot-related settings of a virtual machine."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/boot "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the boot-related settings of a virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/boot/device": {
            "put": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found, or if any of the specified virtual devices is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device_set"
                        }, 
                        "required": true, 
                        "name": "devices", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/boot/device "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Sets the virtual devices that will be used to boot the virtual machine. The virtual machine will check the devices in order, attempting to boot from each, until the virtual machine boots successfully. If the list is empty, the virtual machine will use a default boot sequence. There should be no more than one instance of Device.Entry for a given device type except ETHERNET in the list."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Ordered list of configured boot devices.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device.entry"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/boot/device "
                ], 
                "summary": "Returns an ordered list of boot devices for the virtual machine. If the list is empty, the virtual machine uses a default boot sequence."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/cdrom": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual CD-ROM device identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual CD-ROM device to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual CD-ROM devices.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "summary": "Returns commonly used information about the virtual CD-ROM devices belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/cdrom/{cdrom}": {
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cdrom", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual CD-ROM device."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual CD-ROM device.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cdrom", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "summary": "Returns information about a virtual CD-ROM device."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cdrom", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "summary": "Removes a virtual CD-ROM device from the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/cdrom/{cdrom}/connect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cdrom", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Connects a virtual CD-ROM device of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Cdrom.update operation may be used to configure the virtual CD-ROM device to start in the connected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/cdrom/{cdrom}/disconnect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual CD-ROM device is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual CD-ROM device identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom.", 
                        "required": true, 
                        "type": "string", 
                        "name": "cdrom", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/cdrom "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Disconnects a virtual CD-ROM device of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the CD-ROM device is not connected to its backing resource. \n For a powered-off virtual machine, the Cdrom.update operation may be used to configure the virtual CD-ROM device to start in the disconnected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/cpu": {
            "get": {
                "responses": {
                    "200": {
                        "description": "CPU-related settings of the virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cpu.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/cpu "
                ], 
                "summary": "Returns the CPU-related settings of a virtual machine."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cpu_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/cpu "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the CPU-related settings of a virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/disk": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual disk identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/disk "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual disk to the virtual machine. While adding the virtual disk, a new VMDK file may be created or an existing VMDK file may be used to back the virtual disk."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about the virtual disks.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/disk "
                ], 
                "summary": "Returns commonly used information about the virtual disks belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/disk/{disk}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual disk.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual disk identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk.", 
                        "required": true, 
                        "type": "string", 
                        "name": "disk", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/disk "
                ], 
                "summary": "Returns information about a virtual disk."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual disk identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk.", 
                        "required": true, 
                        "type": "string", 
                        "name": "disk", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/disk "
                ], 
                "summary": "Removes a virtual disk from the virtual machine. This operation does not destroy the VMDK file that backs the virtual disk. It only detaches the VMDK file from the virtual machine. Once detached, the VMDK file will not be destroyed when the virtual machine to which it was associated is deleted."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual disk is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual disk identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk.", 
                        "required": true, 
                        "type": "string", 
                        "name": "disk", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/disk "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual disk. An update operation can be used to detach the existing VMDK file and attach another VMDK file to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/ethernet": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual Ethernet adapter identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the guest operating system of the virtual machine is not supported and spec includes unset fields that default to guest-specific values.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unsupported"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or network backing is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual Ethernet adapter to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual Ethernet adapters.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "summary": "Returns commonly used information about the virtual Ethernet adapters belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/ethernet/{nic}": {
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine, virtual Ethernet adapter, or backing network is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet.", 
                        "required": true, 
                        "type": "string", 
                        "name": "nic", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual Ethernet adapter."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual Ethernet adapter.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet.", 
                        "required": true, 
                        "type": "string", 
                        "name": "nic", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "summary": "Returns information about a virtual Ethernet adapter."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet.", 
                        "required": true, 
                        "type": "string", 
                        "name": "nic", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "summary": "Removes a virtual Ethernet adapter from the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/ethernet/{nic}/connect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet.", 
                        "required": true, 
                        "type": "string", 
                        "name": "nic", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Connects a virtual Ethernet adapter of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Ethernet.update operation may be used to configure the virtual Ethernet adapter to start in the connected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/ethernet/{nic}/disconnect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual Ethernet adapter is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual Ethernet adapter identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet.", 
                        "required": true, 
                        "type": "string", 
                        "name": "nic", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/ethernet "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Disconnects a virtual Ethernet adapter of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the Ethernet adapter is not connected to its backing resource. \n For a powered-off virtual machine, the Ethernet.update operation may be used to configure the virtual Ethernet adapter to start in the disconnected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/floppy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual floppy drive identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual floppy drive to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual floppy drives.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "summary": "Returns commonly used information about the virtual floppy drives belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/floppy/{floppy}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy.", 
                        "required": true, 
                        "type": "string", 
                        "name": "floppy", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "summary": "Removes a virtual floppy drive from the virtual machine."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy.", 
                        "required": true, 
                        "type": "string", 
                        "name": "floppy", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual floppy drive."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual floppy drive.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy.", 
                        "required": true, 
                        "type": "string", 
                        "name": "floppy", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "summary": "Returns information about a virtual floppy drive."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/floppy/{floppy}/connect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy.", 
                        "required": true, 
                        "type": "string", 
                        "name": "floppy", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Connects a virtual floppy drive of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Floppy.update operation may be used to configure the virtual floppy drive to start in the connected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/floppy/{floppy}/disconnect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual floppy drive is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual floppy drive identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy.", 
                        "required": true, 
                        "type": "string", 
                        "name": "floppy", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/floppy "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Disconnects a virtual floppy drive of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the floppy drive is not connected to its backing resource. \n For a powered-off virtual machine, the Floppy.update operation may be used to configure the virtual floppy floppy to start in the disconnected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/memory": {
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.memory_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/memory "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the memory-related settings of a virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Memory-related settings of the virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.memory.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/memory "
                ], 
                "summary": "Returns the memory-related settings of a virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/parallel": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual parallel port identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual parallel port to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual parallel ports.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "summary": "Returns commonly used information about the virtual parallel ports belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/parallel/{port}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "summary": "Removes a virtual parallel port from the virtual machine."
            }, 
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual parallel port."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual parallel port.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "summary": "Returns information about a virtual parallel port."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/parallel/{port}/connect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Connects a virtual parallel port of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Parallel.update operation may be used to configure the virtual parallel port to start in the connected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/parallel/{port}/disconnect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual parallel port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual parallel port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/parallel "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Disconnects a virtual parallel port of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the parallel port is not connected to its backing. \n For a powered-off virtual machine, the Parallel.update operation may be used to configure the virtual parallel port to start in the disconnected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/serial": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Virtual serial port identifier.\nThe result will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort.", 
                        "schema": {
                            "type": "string"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial_create"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Adds a virtual serial port to the virtual machine."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "List of commonly used information about virtual serial ports.", 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.summary"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "summary": "Returns commonly used information about the virtual serial ports belonging to the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/serial/{port}": {
            "patch": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial_update"
                        }, 
                        "required": true, 
                        "name": "spec", 
                        "in": "body"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Updates the configuration of a virtual serial port."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Information about the specified virtual serial port.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "summary": "Returns information about a virtual serial port."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "summary": "Removes a virtual serial port from the virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/hardware/serial/{port}/connect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Connects a virtual serial port of a powered-on virtual machine to its backing. Connecting the virtual device makes the backing accessible from the perspective of the guest operating system. \n For a powered-off virtual machine, the Serial.update operation may be used to configure the virtual serial port to start in the connected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/hardware/serial/{port}/disconnect": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine or virtual serial port is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }, 
                    {
                        "description": "Virtual serial port identifier.\nThe parameter must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort.", 
                        "required": true, 
                        "type": "string", 
                        "name": "port", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/hardware/serial "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Disconnects a virtual serial port of a powered-on virtual machine from its backing. The virtual device is still present and its backing configuration is unchanged, but from the perspective of the guest operating system, the serial port is not connected to its backing. \n For a powered-off virtual machine, the Serial.update operation may be used to configure the virtual serial port to start in the disconnected state when the virtual machine is powered on.\n"
            }
        }, 
        "/vcenter/vm/{vm}/power": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Power state information for the specified virtual machine.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vcenter.vm.power.info"
                        }
                    }, 
                    "400": {
                        "description": "if the virtual machine's configuration or execution state cannot be accessed.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_inaccessible"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/power "
                ], 
                "summary": "Returns the power state information of a virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/power/reset": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine is performing another operation", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_busy"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/power "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Resets a powered-on virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/power/start": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine is performing another operation.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_busy"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/power "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Powers on a powered-off or suspended virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/power/stop": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine is performing another operation.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_busy"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/power "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Powers off a powered-on or suspended virtual machine."
            }
        }, 
        "/vcenter/vm/{vm}/power/suspend": {
            "post": {
                "responses": {
                    "200": {
                        "description": ""
                    }, 
                    "400": {
                        "description": "if the virtual machine is performing another operation.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.resource_busy"
                        }
                    }, 
                    "401": {
                        "description": "if the user can not be authenticated.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthenticated"
                        }
                    }, 
                    "403": {
                        "description": "if the user doesn't have the required privileges.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.unauthorized"
                        }
                    }, 
                    "404": {
                        "description": "if the virtual machine is not found.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.not_found"
                        }
                    }, 
                    "503": {
                        "description": "if the system is unable to communicate with a service to complete the request.", 
                        "schema": {
                            "$ref": "#/definitions/com.vmware.vapi.std.errors.service_unavailable"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Virtual machine identifier.\nThe parameter must be an identifier for the resource type: VirtualMachine.", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vm/power "
                ], 
                "consumes": [
                    "application/json"
                ], 
                "summary": "Suspends a powered-on virtual machine."
            }
        }
    }, 
    "schemes": [
        "https", 
        "http"
    ], 
    "tags": [], 
    "basePath": "/rest", 
    "host": "", 
    "definitions": {
        "com.vmware.vapi.std.errors.already_exists": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.already_in_desired_state": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.error": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.invalid_argument": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.invalid_element_type": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.not_allowed_in_current_state": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.not_found": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.resource_busy": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.resource_in_use": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.resource_inaccessible": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.service_unavailable": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.unable_to_allocate_resource": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.unauthenticated": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.unauthorized": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.errors.unsupported": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "data": {
                    "type": "dynamic_structure", 
                    "description": "Data to facilitate clients responding to the {@term operation} reporting a standard {@term error} to indicating that it was unable to complete successfully. <p> {@term Operations} may provide data that clients can use when responding to {@term errors}.  Since the data that clients need may be specific to the context of the {@term operation} reporting the {@term error}, different {@term operations} that report the same {@term error} may provide different data in the {@term error}.  The documentation for each each {@term operation} will describe what, if any, data it provides for each {@term error} it reports. The {@link ArgumentLocations}, {@link FileLocations}, and {@link TransientIndication} {@term structures} are intended as possible values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may also be useful as a value for this {@term field} (although that is not its primary purpose).  Some {@term services} may provide their own specific {@term structures} for use as the value of this {@term field} when reporting {@term errors} from their {@term operations}."
                }, 
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "Stack of one or more localizable messages for human {@term error} consumers. <p> The message at the top of the stack (first in the list) describes the {@term error} from the perspective of the {@term operation} the client invoked. Each subsequent message in the stack describes the \"cause\" of the prior message."
                }
            }
        }, 
        "com.vmware.vapi.std.localizable_message": {
            "required": [
                "default_message", 
                "args", 
                "id"
            ], 
            "type": "object", 
            "properties": {
                "default_message": {
                    "type": "string", 
                    "description": "The value of this localizable string or message template in the {@code en_US} (English) locale.  If {@link #id} refers to a message template, the default message will contain the substituted arguments. This value can be used by clients that do not need to display strings and messages in the native language of the user.  It could also be used as a fallback if a client is unable to access the appropriate message catalog."
                }, 
                "args": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Arguments to be substituted into a message template."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the localizable string or message template. <p> This identifier is typically used to retrieve a locale-specific string or message template from a message catalog."
                }
            }
        }, 
        "com.vmware.vcenter.VM.create_spec": {
            "required": [
                "guest_OS"
            ], 
            "type": "object", 
            "properties": {
                "cdroms": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of CD-ROMs.\nIf unset, no CD-ROM devices will be created."
                }, 
                "placement": {
                    "description": "Virtual machine placement information.\nIf unset, the system will attempt choose suitable resources on which to place the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.VM.placement_spec"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Virtual machine name.\nIf unset, a default name will be generated by the server."
                }, 
                "floppies": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of floppy drives.\nIf unset, no floppy drives will be created."
                }, 
                "boot": {
                    "description": "Boot configuration.\nIf unset, guest-specific default values will be used.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.create_spec"
                }, 
                "disks": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of disks.\nIf unset, a single blank virtual disk of a guest-specific size will be created on the same storage as the virtual machine configuration, and will use a guest-specific host bus adapter type. If the guest-specific size is 0, no virtual disk will be created."
                }, 
                "boot_devices": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device.entry_create_spec"
                    }, 
                    "type": "array", 
                    "description": "Boot device configuration.\nIf unset, a server-specific boot sequence will be used."
                }, 
                "hardware_version": {
                    "description": "Virtual hardware version.\nIf unset, defaults to the most recent version supported by the server.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.version"
                }, 
                "guest_OS": {
                    "description": "Guest OS.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.guest_OS"
                }, 
                "nics": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of Ethernet adapters.\nIf unset, no Ethernet adapters will be created."
                }, 
                "parallel_ports": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of parallel ports.\nIf unset, no parallel ports will be created."
                }, 
                "memory": {
                    "description": "Memory configuration.\nIf unset, guest-specific default values will be used.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.memory.update_spec"
                }, 
                "scsi_adapters": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of SCSI adapters.\nIf unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a SCSI host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is SCSI. The type of the SCSI adapter will be a guest-specific default type."
                }, 
                "sata_adapters": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of SATA adapters.\nIf unset, any adapters necessary to connect the virtual machine's storage devices will be created; this includes any devices that explicitly specify a SATA host bus adapter, as well as any devices that do not specify a host bus adapter if the guest's preferred adapter type is SATA."
                }, 
                "cpu": {
                    "description": "CPU configuration.\nIf unset, guest-specific default values will be used.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cpu.update_spec"
                }, 
                "serial_ports": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.create_spec"
                    }, 
                    "type": "array", 
                    "description": "List of serial ports.\nIf unset, no serial ports will be created."
                }
            }
        }, 
        "com.vmware.vcenter.VM.filter_spec": {
            "type": "object", 
            "properties": {
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "power_states": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.power.state"
                    }, 
                    "type": "array", 
                    "description": "Power states that a virtual machine must be in to match the filter (see Power.Info.state.\nIf unset or empty, virtual machines in any power state match the filter."
                }, 
                "hosts": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Hosts that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines on any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that virtual machines must have to match the filter (see VM.Info.name).\nIf unset or empty, virtual machines with any name match the filter."
                }, 
                "clusters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Clusters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }, 
                "resource_pools": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Resource pools that must contain the virtual machine for the virtual machine to match the filter.\nIf unset or empty, virtual machines in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool."
                }, 
                "vms": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of virtual machines that can match the filter.\nIf unset or empty, virtual machines with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: VirtualMachine."
                }
            }
        }, 
        "com.vmware.vcenter.VM.info": {
            "required": [
                "parallel_ports", 
                "cdroms", 
                "name", 
                "floppies", 
                "boot", 
                "disks", 
                "boot_devices", 
                "guest_OS", 
                "serial_ports", 
                "hardware", 
                "nics", 
                "power_state", 
                "memory", 
                "scsi_adapters", 
                "sata_adapters", 
                "cpu"
            ], 
            "type": "object", 
            "properties": {
                "parallel_ports": {
                    "description": "List of parallel ports.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort."
                }, 
                "cdroms": {
                    "description": "List of CD-ROMs.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Virtual machine name."
                }, 
                "floppies": {
                    "description": "List of floppy drives.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy."
                }, 
                "boot": {
                    "description": "Boot configuration.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.info"
                }, 
                "disks": {
                    "description": "List of disks.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk."
                }, 
                "boot_devices": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device.entry"
                    }, 
                    "type": "array", 
                    "description": "Boot device configuration. If the list has no entries, a server-specific default boot sequence is used."
                }, 
                "guest_OS": {
                    "description": "Guest OS.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.guest_OS"
                }, 
                "serial_ports": {
                    "description": "List of serial ports.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort."
                }, 
                "hardware": {
                    "description": "Virtual hardware version information.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.info"
                }, 
                "nics": {
                    "description": "List of Ethernet adapters.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet."
                }, 
                "power_state": {
                    "description": "Power state of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.power.state"
                }, 
                "memory": {
                    "description": "Memory configuration.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.memory.info"
                }, 
                "scsi_adapters": {
                    "description": "List of SCSI adapters.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter."
                }, 
                "sata_adapters": {
                    "description": "List of SATA adapters.\nWhen clients pass a value of this structure as a parameter, the key in the field map must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter. When operations return a value of this structure as a result, the key in the field map will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter."
                }, 
                "cpu": {
                    "description": "CPU configuration.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cpu.info"
                }
            }
        }, 
        "com.vmware.vcenter.VM.placement_spec": {
            "type": "object", 
            "properties": {
                "resource_pool": {
                    "type": "string", 
                    "description": "Resource pool into which the virtual machine should be placed.\nIf unset, the system will attempt to choose a suitable resource pool for the virtual machine; if a resource pool cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool."
                }, 
                "cluster": {
                    "type": "string", 
                    "description": "Cluster onto which the virtual machine should be placed. \n If VM.PlacementSpec.cluster and VM.PlacementSpec.resource-pool are both specified, VM.PlacementSpec.resource-pool must belong to VM.PlacementSpec.cluster. \n\n If VM.PlacementSpec.cluster and VM.PlacementSpec.host are both specified, VM.PlacementSpec.host must be a member of VM.PlacementSpec.cluster.\n\nThis field should be unset when VM.PlacementSpec.resource-pool belongs to a standalone host, and may be unset when VM.PlacementSpec.resource-pool belongs to a cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource."
                }, 
                "folder": {
                    "type": "string", 
                    "description": "Virtual machine folder into which the virtual machine should be placed.\nIf unset, the system will attempt to choose a suitable folder for the virtual machine; if a folder cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "host": {
                    "type": "string", 
                    "description": "Host onto which the virtual machine should be placed. \n If VM.PlacementSpec.host and VM.PlacementSpec.resource-pool are both specified, VM.PlacementSpec.resource-pool must belong to VM.PlacementSpec.host. \n\n If VM.PlacementSpec.host and VM.PlacementSpec.cluster are both specified, VM.PlacementSpec.host must be a member of VM.PlacementSpec.cluster.\n\nThis field may be unset when VM.PlacementSpec.resource-pool belongs to a standalone host or a DRS-enabled cluster. If unset when deploying to a cluster without DRS enabled, the system will attempt to choose a suitable host for the virtual machine; if a host cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem."
                }, 
                "datastore": {
                    "type": "string", 
                    "description": "Datastore on which the virtual machine's configuration state should be stored. This datastore will also be used for any virtual disks that are created as part of the virtual machine creation operation.\nIf unset, the system will attempt to choose suitable storage for the virtual machine; if storage cannot be chosen, the virtual machine creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore."
                }
            }
        }, 
        "com.vmware.vcenter.VM.summary": {
            "required": [
                "vm", 
                "power_state", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "memory_size_MiB": {
                    "type": "integer", 
                    "description": "Memory size in mebibytes.\nThis field will be unset if the virtual machine configuration is not available. For example, the configuration information would be unavailable if the server is unable to access the virtual machine files on disk, and is often also unavailable during the intial phases of virtual machine creation.", 
                    "format": "int64"
                }, 
                "cpu_count": {
                    "type": "integer", 
                    "description": "Number of CPU cores.\nThis field will be unset if the virtual machine configuration is not available. For example, the configuration information would be unavailable if the server is unable to access the virtual machine files on disk, and is often also unavailable during the intial phases of virtual machine creation.", 
                    "format": "int64"
                }, 
                "vm": {
                    "type": "string", 
                    "description": "Identifier of the virtual machine.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: VirtualMachine. When operations return a value of this structure as a result, the field will be an identifier for the resource type: VirtualMachine."
                }, 
                "power_state": {
                    "description": "Power state of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.power.state"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the Virtual machine."
                }
            }
        }, 
        "com.vmware.vcenter.VM_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Virtual machine specification.", 
                    "$ref": "#/definitions/com.vmware.vcenter.VM.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.cluster.filter_spec": {
            "type": "object", 
            "properties": {
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "clusters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of clusters that can match the filter.\nIf unset or empty, clusters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that clusters must have to match the filter (see Cluster.Info.name).\nIf unset or empty, clusters with any name match the filter."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the cluster for the cluster to match the filter.\nIf unset or empty, clusters in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }
            }
        }, 
        "com.vmware.vcenter.cluster.info": {
            "required": [
                "resource_pool", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "resource_pool": {
                    "type": "string", 
                    "description": "Identifier of the root resource pool of the cluster\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the cluster"
                }
            }
        }, 
        "com.vmware.vcenter.cluster.summary": {
            "required": [
                "cluster", 
                "drs_enabled", 
                "name", 
                "ha_enabled"
            ], 
            "type": "object", 
            "properties": {
                "cluster": {
                    "type": "string", 
                    "description": "Identifier of the cluster.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ClusterComputeResource."
                }, 
                "drs_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the vSphere DRS service is enabled for the cluster."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the cluster."
                }, 
                "ha_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the vSphere HA feature is enabled for the cluster."
                }
            }
        }, 
        "com.vmware.vcenter.datacenter.create_spec": {
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "folder": {
                    "type": "string", 
                    "description": "Datacenter folder in which the new datacenter should be created.\nIf unset, the system will attempt to choose a suitable folder for the datacenter; if a folder cannot be chosen, the datacenter creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the datacenter to be created."
                }
            }
        }, 
        "com.vmware.vcenter.datacenter.filter_spec": {
            "type": "object", 
            "properties": {
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the datacenters for the datacenter to match the filter.\nIf unset or empty, datacenters in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of datacenters that can match the filter.\nIf unset or empty, datacenters with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that datacenters must have to match the filter (see Datacenter.Info.name).\nIf unset or empty, datacenters with any name match the filter."
                }
            }
        }, 
        "com.vmware.vcenter.datacenter.info": {
            "required": [
                "host_folder", 
                "network_folder", 
                "vm_folder", 
                "name", 
                "datastore_folder"
            ], 
            "type": "object", 
            "properties": {
                "host_folder": {
                    "type": "string", 
                    "description": "The root host and cluster folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "network_folder": {
                    "type": "string", 
                    "description": "The root network folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "vm_folder": {
                    "type": "string", 
                    "description": "The root virtual machine folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the datacenter."
                }, 
                "datastore_folder": {
                    "type": "string", 
                    "description": "The root datastore folder associated with the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }
            }
        }, 
        "com.vmware.vcenter.datacenter.summary": {
            "required": [
                "datacenter", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "datacenter": {
                    "type": "string", 
                    "description": "Identifier of the datacenter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datacenter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datacenter."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the datacenter."
                }
            }
        }, 
        "com.vmware.vcenter.datacenter_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new datacenter to be created.", 
                    "$ref": "#/definitions/com.vmware.vcenter.datacenter.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.datastore.filter_spec": {
            "type": "object", 
            "properties": {
                "datastores": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of datastores that can match the filter.\nIf unset or empty, datastores with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datastore. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datastore."
                }, 
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that datastores must have to match the filter (see Datastore.Info.name).\nIf unset or empty, datastores with any name match the filter."
                }, 
                "types": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.datastore.type"
                    }, 
                    "type": "array", 
                    "description": "Types that datastores must have to match the filter (see Datastore.Summary.type).\nIf unset or empty, datastores with any type match the filter."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the datastore for the datastore to match the filter.\nIf unset or empty, datastores in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }
            }
        }, 
        "com.vmware.vcenter.datastore.info": {
            "required": [
                "accessible", 
                "name", 
                "multiple_host_access", 
                "type", 
                "thin_provisioning_supported"
            ], 
            "type": "object", 
            "properties": {
                "accessible": {
                    "type": "boolean", 
                    "description": "Whether or not this datastore is accessible."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the datastore."
                }, 
                "multiple_host_access": {
                    "type": "boolean", 
                    "description": "Whether or not ore than one host in the datacenter has been configured with access to the datastore."
                }, 
                "free_space": {
                    "type": "integer", 
                    "description": "Available space of this datastore, in bytes. \n The server periodically updates this value.\n\nThis field will be unset if the available space of this datastore is not known.", 
                    "format": "int64"
                }, 
                "type": {
                    "description": "Type (Type) of the datastore.", 
                    "$ref": "#/definitions/com.vmware.vcenter.datastore.type"
                }, 
                "thin_provisioning_supported": {
                    "type": "boolean", 
                    "description": "Whether or not the datastore supports thin provisioning on a per file basis. When thin provisioning is used, backing storage is lazily allocated."
                }
            }
        }, 
        "com.vmware.vcenter.datastore.summary": {
            "required": [
                "datastore", 
                "type", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "capacity": {
                    "type": "integer", 
                    "description": "Capacity of this datastore, in bytes. \n The server periodically updates this value.\n\nThis field will be unset if the capacity of this datastore is not known.", 
                    "format": "int64"
                }, 
                "datastore": {
                    "type": "string", 
                    "description": "Identifier of the datastore.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Datastore. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Datastore."
                }, 
                "type": {
                    "description": "Type (Type) of the datatore.", 
                    "$ref": "#/definitions/com.vmware.vcenter.datastore.type"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the datastore."
                }, 
                "free_space": {
                    "type": "integer", 
                    "description": "Available space of this datastore, in bytes. \n The server periodically updates this value.\n\nThis field will be unset if the available space of this datastore is not known.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.datastore.type": {
            "enum": [
                "VMFS", 
                "NFS", 
                "NFS41", 
                "CIFS", 
                "VSAN", 
                "VFFS", 
                "VVOL"
            ], 
            "type": "string", 
            "description": "The Datastore.Type enumerated type defines the supported types of vCenter datastores."
        }, 
        "com.vmware.vcenter.folder.filter_spec": {
            "type": "object", 
            "properties": {
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of folders that can match the filter.\nIf unset or empty, folders with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "parent_folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "type": {
                    "description": "Type that folders must have to match the filter (see Folder.Summary.type).\nIf unset, folders with any type match the filter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.folder.type"
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that folders must have to match the filter (see Folder.Summary.name).\nIf unset or empty, folders with any name match the filter."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the folder for the folder to match the filter.\nIf unset or empty, folder in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }
            }
        }, 
        "com.vmware.vcenter.folder.summary": {
            "required": [
                "folder", 
                "type", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "folder": {
                    "type": "string", 
                    "description": "Identifier of the folder.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "type": {
                    "description": "Type (Type) of the vCenter Server folder.", 
                    "$ref": "#/definitions/com.vmware.vcenter.folder.type"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the vCenter Server folder."
                }
            }
        }, 
        "com.vmware.vcenter.folder.type": {
            "enum": [
                "DATACENTER", 
                "DATASTORE", 
                "HOST", 
                "NETWORK", 
                "VIRTUAL_MACHINE"
            ], 
            "type": "string", 
            "description": "The Folder.Type enumerated type defines the type of a vCenter Server folder. The type of a folder determines what what kinds of children can be contained in the folder."
        }, 
        "com.vmware.vcenter.host.connection_state": {
            "enum": [
                "CONNECTED", 
                "DISCONNECTED", 
                "NOT_RESPONDING"
            ], 
            "type": "string", 
            "description": "The Host.ConnectionState enumerated type defines the connection status of a host."
        }, 
        "com.vmware.vcenter.host.create_spec": {
            "required": [
                "thumbprint_verification", 
                "hostname", 
                "password", 
                "user_name"
            ], 
            "type": "object", 
            "properties": {
                "thumbprint_verification": {
                    "description": "Type of host's SSL certificate verification to be done.", 
                    "$ref": "#/definitions/com.vmware.vcenter.host.create_spec.thumbprint_verification"
                }, 
                "force_add": {
                    "type": "boolean", 
                    "description": "Whether host should be added to the vCenter Server even if it is being managed by another vCenter Server. The original vCenterServer loses connection to the host.\nIf unset, forceAdd is default to false."
                }, 
                "hostname": {
                    "type": "string", 
                    "description": "The IP address or DNS resolvable name of the host."
                }, 
                "thumbprint": {
                    "type": "string", 
                    "description": "The thumbprint of the SSL certificate, which the host is expected to have. The thumbprint is always computed using the SHA1 hash and is the string representation of that hash in the format: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx where, 'x' represents a hexadecimal digit.\nThis field is optional and it is only relevant when the value of Host.CreateSpec.thumbprint-verification is THUMBPRINT."
                }, 
                "folder": {
                    "type": "string", 
                    "description": "Host and cluster folder in which the new standalone host should be created.\nIf unset, the system will attempt to choose a suitable folder for the host; if a folder cannot be chosen, the host creation operation will fail.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Folder. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Folder."
                }, 
                "password": {
                    "type": "secret", 
                    "description": "The password for the administrator account on the host."
                }, 
                "user_name": {
                    "type": "string", 
                    "description": "The administrator account on the host."
                }, 
                "port": {
                    "type": "integer", 
                    "description": "The port of the host.\nIf unset, port 443 will be used.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.host.create_spec.thumbprint_verification": {
            "enum": [
                "NONE", 
                "THUMBPRINT"
            ], 
            "type": "string", 
            "description": "The Host.CreateSpec.ThumbprintVerification enumerated type defines the thumbprint verification schemes for a host's SSL certificate."
        }, 
        "com.vmware.vcenter.host.filter_spec": {
            "type": "object", 
            "properties": {
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "standalone": {
                    "type": "boolean", 
                    "description": "If true, only hosts that are not part of a cluster can match the filter, and if false, only hosts that are are part of a cluster can match the filter.\nIf unset Hosts can match filter independent of whether they are part of a cluster or not. If this field is true and Host.FilterSpec.clusters os not empty, no hosts will match the filter."
                }, 
                "hosts": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of hosts that can match the filter.\nIf unset or empty, hosts with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that hosts must have to match the filter (see Host.Summary.name).\nIf unset or empty, hosts with any name match the filter."
                }, 
                "clusters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Clusters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any cluster and hosts that are not in a cluster match the filter. If this field is not empty and Host.FilterSpec.standalone is true, no hosts will match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the hosts for the hosts to match the filter.\nIf unset or empty, hosts in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }, 
                "connection_states": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.host.connection_state"
                    }, 
                    "type": "array", 
                    "description": "Connection states that a host must be in to match the filter (see Host.Summary.connection-state.\nIf unset or empty, hosts in any connection state match the filter."
                }
            }
        }, 
        "com.vmware.vcenter.host.power_state": {
            "enum": [
                "POWERED_ON", 
                "POWERED_OFF", 
                "STANDBY"
            ], 
            "type": "string", 
            "description": "The Host.PowerState enumerated type defines the power states of a host."
        }, 
        "com.vmware.vcenter.host.summary": {
            "required": [
                "host", 
                "connection_state", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "host": {
                    "type": "string", 
                    "description": "Identifier of the host.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: HostSystem. When operations return a value of this structure as a result, the field will be an identifier for the resource type: HostSystem."
                }, 
                "connection_state": {
                    "description": "Connection status of the host", 
                    "$ref": "#/definitions/com.vmware.vcenter.host.connection_state"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the host."
                }, 
                "power_state": {
                    "description": "Power state of the host\nThis field is optional and it is only relevant when the value of Host.Summary.connection-state is CONNECTED.", 
                    "$ref": "#/definitions/com.vmware.vcenter.host.power_state"
                }
            }
        }, 
        "com.vmware.vcenter.host_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new host to be created.", 
                    "$ref": "#/definitions/com.vmware.vcenter.host.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.network.filter_spec": {
            "type": "object", 
            "properties": {
                "folders": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Folders that must contain the network for the network to match the filter.\nIf unset or empty, networks in any folder match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Folder. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Folder."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the network for the network to match the filter.\nIf unset or empty, networks in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }, 
                "networks": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of networks that can match the filter.\nIf unset or empty, networks with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Network. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Network."
                }, 
                "types": {
                    "uniqueItems": true, 
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.network.type"
                    }, 
                    "type": "array", 
                    "description": "Types that networks must have to match the filter (see Network.Summary.type).\nIf unset, networks with any type match the filter."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that networks must have to match the filter (see Network.Summary.name).\nIf unset or empty, networks with any name match the filter."
                }
            }
        }, 
        "com.vmware.vcenter.network.summary": {
            "required": [
                "type", 
                "network", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "description": "Type (Type) of the vCenter Server network.", 
                    "$ref": "#/definitions/com.vmware.vcenter.network.type"
                }, 
                "network": {
                    "type": "string", 
                    "description": "Identifier of the network.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the network."
                }
            }
        }, 
        "com.vmware.vcenter.network.type": {
            "enum": [
                "STANDARD_PORTGROUP", 
                "DISTRIBUTED_PORTGROUP", 
                "OPAQUE_NETWORK"
            ], 
            "type": "string", 
            "description": "The Network.Type enumerated type defines the type of a vCenter Server network. The type of a network can be used to determine what features it supports and which APIs can be used to find more information about the network or change its configuration."
        }, 
        "com.vmware.vcenter.ovf.disk_provisioning_type": {
            "enum": [
                "thin", 
                "thick", 
                "eagerZeroedThick"
            ], 
            "type": "string", 
            "description": "The {@name DiskProvisioningType} {@term enumerated type} defines the virtual disk provisioning types that can be set for a disk on the target platform."
        }, 
        "com.vmware.vcenter.ovf.export_flag.info": {
            "required": [
                "option", 
                "description"
            ], 
            "type": "object", 
            "properties": {
                "option": {
                    "type": "string", 
                    "description": "The name of the export flag that is supported by the server."
                }, 
                "description": {
                    "description": "Localizable description of the export flag.", 
                    "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.import_flag.info": {
            "required": [
                "option", 
                "description"
            ], 
            "type": "object", 
            "properties": {
                "option": {
                    "type": "string", 
                    "description": "The name of the import flag that is supported by the deployment platform."
                }, 
                "description": {
                    "description": "Localizable description of the import flag.", 
                    "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.create_result": {
            "required": [
                "succeeded"
            ], 
            "type": "object", 
            "properties": {
                "ovf_library_item_id": {
                    "type": "string", 
                    "description": "Identifier of the created or updated library item."
                }, 
                "succeeded": {
                    "type": "boolean", 
                    "description": "Whether the {@name LibraryItem#create} {@term operation} completed successfully."
                }, 
                "error": {
                    "description": "Errors, warnings, and informational messages produced by the {@name LibraryItem#create} {@term operation}.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.result_info"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.create_spec": {
            "type": "object", 
            "properties": {
                "flags": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Flags to use for OVF package creation. The supported flags can be obtained using {@link ExportFlag#list}."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name to use in the OVF descriptor stored in the library item."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description to use in the OVF descriptor stored in the library item."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.create_target": {
            "type": "object", 
            "properties": {
                "library_id": {
                    "type": "string", 
                    "description": "Identifier of the library in which a new library item should be created. This {@term field} is not used if the {@name #libraryItemId} {@term field} is specified."
                }, 
                "library_item_id": {
                    "type": "string", 
                    "description": "Identifier of the library item that should be should be updated."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.deployable_identity": {
            "required": [
                "type", 
                "id"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Type of the deployable resource."
                }, 
                "id": {
                    "type": "string", 
                    "description": "Identifier of the deployable resource."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.deployment_result": {
            "required": [
                "succeeded"
            ], 
            "type": "object", 
            "properties": {
                "error": {
                    "description": "Errors, warnings, and informational messages produced by the {@name LibraryItem#deploy} {@term operation}.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.result_info"
                }, 
                "succeeded": {
                    "type": "boolean", 
                    "description": "Whether the {@name LibraryItem#deploy} {@term operation} completed successfully."
                }, 
                "resource_id": {
                    "description": "Identifier of the deployed resource entity.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.deployable_identity"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.deployment_target": {
            "required": [
                "resource_pool_id"
            ], 
            "type": "object", 
            "properties": {
                "host_id": {
                    "type": "string", 
                    "description": "Identifier of the target host on which the virtual machine or virtual appliance will run. The target host must be a member of the cluster that contains the resource pool identified by {@link #resourcePoolId}."
                }, 
                "folder_id": {
                    "type": "string", 
                    "description": "Identifier of the vCenter folder that should contain the virtual machine or virtual appliance. The folder must be virtual machine folder."
                }, 
                "resource_pool_id": {
                    "type": "string", 
                    "description": "Identifier of the resource pool to which the virtual machine or virtual appliance should be attached."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.ovf_summary": {
            "required": [
                "EULAs"
            ], 
            "type": "object", 
            "properties": {
                "EULAs": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "End User License Agreements specified in the OVF descriptor. All end user license agreements must be accepted in order for the {@name LibraryItem#deploy} {@term operation} to succeed. See {@link ResourcePoolDeploymentSpec#acceptAllEula}."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Default name for the virtual machine or virtual appliance."
                }, 
                "annotation": {
                    "type": "string", 
                    "description": "Default annotation for the virtual machine or virtual appliance."
                }, 
                "storage_groups": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Section identifiers for sections of type vmw:StorageGroupSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#storageMappings}."
                }, 
                "networks": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Section identifiers for sections of type ovf:NetworkSection in the OVF descriptor. These identifiers can be used as keys in {@link ResourcePoolDeploymentSpec#networkMappings}."
                }, 
                "additional_params": {
                    "items": {
                        "type": "dynamic_structure"
                    }, 
                    "type": "array", 
                    "description": "Additional OVF parameters which can be specified for the deployment target. These OVF parameters can be inspected, optionally modified, and used as values in {@link ResourcePoolDeploymentSpec#additionalParameters} for the {@name LibraryItem#deploy} {@term operation}."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.resource_pool_deployment_spec": {
            "required": [
                "accept_all_EULA"
            ], 
            "type": "object", 
            "properties": {
                "default_datastore_id": {
                    "type": "string", 
                    "description": "Default datastore to use for all sections of type vmw:StorageSection in the OVF descriptor."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name assigned to the deployed target virtual machine or virtual appliance."
                }, 
                "additional_parameters": {
                    "items": {
                        "type": "dynamic_structure"
                    }, 
                    "type": "array", 
                    "description": "Additional OVF parameters that may be needed for the deployment. Additional OVF parameters may be required by the OVF descriptor of the OVF package in the library item. Examples of OVF parameters that can be specified through this {@term field} include, but are not limited to: <ul> <li>{@link DeploymentOptionParams}</li> <li>{@link ExtraConfigParams}</li> <li>{@link IpAllocationParams}</li> <li>{@link PropertyParams}</li> <li>{@link ScaleOutParams}</li> <li>{@link VcenterExtensionParams}</li> </ul>"
                }, 
                "locale": {
                    "type": "string", 
                    "description": "The locale to use for parsing the OVF descriptor."
                }, 
                "network_mappings": {
                    "description": "Specification of the target network to use for sections of type ovf:NetworkSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:NetworkSection section in the OVF descriptor and the value is the target network to be used for deployment."
                }, 
                "storage_mappings": {
                    "description": "Specification of the target storage to use for sections of type vmw:StorageGroupSection in the OVF descriptor. The key in the {@term map} is the section identifier of the ovf:StorageGroupSection section in the OVF descriptor and the value is the target storage specification to be used for deployment. See {@link StorageGroupMapping}."
                }, 
                "flags": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Flags to be use for deployment. The supported flag values can be obtained using {@link ImportFlag#list}."
                }, 
                "storage_provisioning": {
                    "description": "Default storage provisioning type to use for all sections of type vmw:StorageSection in the OVF descriptor.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.disk_provisioning_type"
                }, 
                "accept_all_EULA": {
                    "type": "boolean", 
                    "description": "Whether to accept all End User License Agreements. See {@link OvfSummary#eulas}."
                }, 
                "annotation": {
                    "type": "string", 
                    "description": "Annotation assigned to the deployed target virtual machine or virtual appliance."
                }, 
                "storage_profile_id": {
                    "type": "string", 
                    "description": "Default storage profile to use for all sections of type vmw:StorageSection in the OVF descriptor."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item.result_info": {
            "required": [
                "information", 
                "errors", 
                "warnings"
            ], 
            "type": "object", 
            "properties": {
                "information": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.ovf.ovf_info"
                    }, 
                    "type": "array", 
                    "description": "Information messages reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. For example, a non-required parameter was ignored."
                }, 
                "errors": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.ovf.ovf_error"
                    }, 
                    "type": "array", 
                    "description": "Errors reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. These errors would have prevented the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation} from completing successfully."
                }, 
                "warnings": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.ovf.ovf_warning"
                    }, 
                    "type": "array", 
                    "description": "Warnings reported by the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation}. These warnings would not have prevented the {@name LibraryItem#create} or {@name LibraryItem#deploy} {@term operation} from completing successfully, but there might be issues that warrant attention."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item_create": {
            "required": [
                "source", 
                "target", 
                "create_spec"
            ], 
            "type": "object", 
            "properties": {
                "source": {
                    "description": "Identifier of the virtual machine or virtual appliance to use as the source.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.deployable_identity"
                }, 
                "client_token": {
                    "type": "string", 
                    "description": "Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried."
                }, 
                "target": {
                    "description": "Specification of the target content library and library item.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.create_target"
                }, 
                "create_spec": {
                    "description": "Information used to create the OVF package from the source virtual machine or virtual appliance.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item_deploy": {
            "required": [
                "target", 
                "deployment_spec"
            ], 
            "type": "object", 
            "properties": {
                "client_token": {
                    "type": "string", 
                    "description": "Client-generated token used to retry a request if the client fails to get a response from the server. If the original request succeeded, the result of that request will be returned, otherwise the operation will be retried."
                }, 
                "target": {
                    "description": "Specification of the deployment target.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.deployment_target"
                }, 
                "deployment_spec": {
                    "description": "Specification of how the OVF package should be deployed to the target.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.resource_pool_deployment_spec"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.library_item_filter": {
            "required": [
                "target"
            ], 
            "type": "object", 
            "properties": {
                "target": {
                    "description": "Specification of the deployment target.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.library_item.deployment_target"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.ovf_error": {
            "required": [
                "category"
            ], 
            "type": "object", 
            "properties": {
                "category": {
                    "description": "The message category.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.ovf_message.category"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of input parameter."
                }, 
                "value": {
                    "type": "string", 
                    "description": "The value of input parameter."
                }, 
                "error": {
                    "type": "dynamic_structure", 
                    "description": "Represents a server {@link Error}."
                }, 
                "message": {
                    "description": "A localizable message.", 
                    "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                }, 
                "issues": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.ovf.parse_issue"
                    }, 
                    "type": "array", 
                    "description": "{@term List} of parse issues (see {@link ParseIssue})."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.ovf_info": {
            "required": [
                "messages"
            ], 
            "type": "object", 
            "properties": {
                "messages": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                    }, 
                    "type": "array", 
                    "description": "A {@term list} of localizable messages (see {@link LocalizableMessage})."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.ovf_message.category": {
            "enum": [
                "VALIDATION", 
                "INPUT", 
                "SERVER"
            ], 
            "type": "string", 
            "description": "The {@name Category} {@term enumerated type} defines the categories of messages (see {@link OvfMessage})."
        }, 
        "com.vmware.vcenter.ovf.ovf_warning": {
            "required": [
                "category"
            ], 
            "type": "object", 
            "properties": {
                "category": {
                    "description": "The message category.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.ovf_message.category"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of input parameter."
                }, 
                "value": {
                    "type": "string", 
                    "description": "The value of input parameter."
                }, 
                "error": {
                    "type": "dynamic_structure", 
                    "description": "Represents a server {@link Error}."
                }, 
                "message": {
                    "description": "A localizable message.", 
                    "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                }, 
                "issues": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.ovf.parse_issue"
                    }, 
                    "type": "array", 
                    "description": "{@term List} of parse issues (see {@link ParseIssue})."
                }
            }
        }, 
        "com.vmware.vcenter.ovf.parse_issue": {
            "required": [
                "category", 
                "line_number", 
                "message", 
                "file", 
                "column_number"
            ], 
            "type": "object", 
            "properties": {
                "category": {
                    "description": "The category of the parse issue.", 
                    "$ref": "#/definitions/com.vmware.vcenter.ovf.parse_issue.category"
                }, 
                "line_number": {
                    "type": "integer", 
                    "description": "The line number of the line in the file (see {@link #file}) where the parse issue was found (or -1 if not applicable).", 
                    "format": "int64"
                }, 
                "message": {
                    "description": "A localizable message describing the parse issue.", 
                    "$ref": "#/definitions/com.vmware.vapi.std.localizable_message"
                }, 
                "file": {
                    "type": "string", 
                    "description": "The name of the file in which the parse issue was found."
                }, 
                "column_number": {
                    "type": "integer", 
                    "description": "The position in the line (see {@link #lineNumber}) (or -1 if not applicable).", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.ovf.parse_issue.category": {
            "enum": [
                "VALUE_ILLEGAL", 
                "ATTRIBUTE_REQUIRED", 
                "ATTRIBUTE_ILLEGAL", 
                "ELEMENT_REQUIRED", 
                "ELEMENT_ILLEGAL", 
                "ELEMENT_UNKNOWN", 
                "SECTION_UNKNOWN", 
                "SECTION_RESTRICTION", 
                "PARSE_ERROR", 
                "GENERATE_ERROR", 
                "VALIDATION_ERROR", 
                "EXPORT_ERROR", 
                "INTERNAL_ERROR"
            ], 
            "type": "string", 
            "description": "The {@name Category} {@term enumerated type} defines the categories of issues that can be found when parsing files inside an OVF package (see {@link ParseIssue}) including OVF descriptor (which is an XML document), manifest and certificate files, or exporting an OVF package."
        }, 
        "com.vmware.vcenter.resource_pool.filter_spec": {
            "type": "object", 
            "properties": {
                "parent_resource_pools": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Resource pools that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any resource pool match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool."
                }, 
                "hosts": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Hosts that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any host match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: HostSystem. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: HostSystem."
                }, 
                "names": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Names that resource pools must have to match the filter (see ResourcePool.Info.name).\nIf unset or empty, resource pools with any name match the filter."
                }, 
                "clusters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Clusters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any cluster match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ClusterComputeResource. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ClusterComputeResource."
                }, 
                "datacenters": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Datacenters that must contain the resource pool for the resource pool to match the filter.\nIf unset or empty, resource pools in any datacenter match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: Datacenter. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: Datacenter."
                }, 
                "resource_pools": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of resource pools that can match the filter.\nIf unset or empty, resource pools with any identifier match the filter.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool."
                }
            }
        }, 
        "com.vmware.vcenter.resource_pool.info": {
            "required": [
                "resource_pools", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "resource_pools": {
                    "uniqueItems": true, 
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Identifiers of the child resource pools contained in this resource pool.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: ResourcePool."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the vCenter Server resource pool."
                }
            }
        }, 
        "com.vmware.vcenter.resource_pool.summary": {
            "required": [
                "resource_pool", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "resource_pool": {
                    "type": "string", 
                    "description": "Identifier of the resource pool.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: ResourcePool. When operations return a value of this structure as a result, the field will be an identifier for the resource type: ResourcePool."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the resource pool."
                }
            }
        }, 
        "com.vmware.vcenter.vm.guest_OS": {
            "enum": [
                "DOS", 
                "WIN_31", 
                "WIN_95", 
                "WIN_98", 
                "WIN_ME", 
                "WIN_NT", 
                "WIN_2000_PRO", 
                "WIN_2000_SERV", 
                "WIN_2000_ADV_SERV", 
                "WIN_XP_HOME", 
                "WIN_XP_PRO", 
                "WIN_XP_PRO_64", 
                "WIN_NET_WEB", 
                "WIN_NET_STANDARD", 
                "WIN_NET_ENTERPRISE", 
                "WIN_NET_DATACENTER", 
                "WIN_NET_BUSINESS", 
                "WIN_NET_STANDARD_64", 
                "WIN_NET_ENTERPRISE_64", 
                "WIN_LONGHORN", 
                "WIN_LONGHORN_64", 
                "WIN_NET_DATACENTER_64", 
                "WIN_VISTA", 
                "WIN_VISTA_64", 
                "WINDOWS_7", 
                "WINDOWS_7_64", 
                "WINDOWS_7_SERVER_64", 
                "WINDOWS_8", 
                "WINDOWS_8_64", 
                "WINDOWS_8_SERVER_64", 
                "WINDOWS_9", 
                "WINDOWS_9_64", 
                "WINDOWS_9_SERVER_64", 
                "WINDOWS_HYPERV", 
                "FREEBSD", 
                "FREEBSD_64", 
                "REDHAT", 
                "RHEL_2", 
                "RHEL_3", 
                "RHEL_3_64", 
                "RHEL_4", 
                "RHEL_4_64", 
                "RHEL_5", 
                "RHEL_5_64", 
                "RHEL_6", 
                "RHEL_6_64", 
                "RHEL_7", 
                "RHEL_7_64", 
                "CENTOS", 
                "CENTOS_64", 
                "CENTOS_6", 
                "CENTOS_6_64", 
                "CENTOS_7", 
                "CENTOS_7_64", 
                "ORACLE_LINUX", 
                "ORACLE_LINUX_64", 
                "ORACLE_LINUX_6", 
                "ORACLE_LINUX_6_64", 
                "ORACLE_LINUX_7", 
                "ORACLE_LINUX_7_64", 
                "SUSE", 
                "SUSE_64", 
                "SLES", 
                "SLES_64", 
                "SLES_10", 
                "SLES_10_64", 
                "SLES_11", 
                "SLES_11_64", 
                "SLES_12", 
                "SLES_12_64", 
                "NLD_9", 
                "OES", 
                "SJDS", 
                "MANDRAKE", 
                "MANDRIVA", 
                "MANDRIVA_64", 
                "TURBO_LINUX", 
                "TURBO_LINUX_64", 
                "UBUNTU", 
                "UBUNTU_64", 
                "DEBIAN_4", 
                "DEBIAN_4_64", 
                "DEBIAN_5", 
                "DEBIAN_5_64", 
                "DEBIAN_6", 
                "DEBIAN_6_64", 
                "DEBIAN_7", 
                "DEBIAN_7_64", 
                "DEBIAN_8", 
                "DEBIAN_8_64", 
                "DEBIAN_9", 
                "DEBIAN_9_64", 
                "DEBIAN_10", 
                "DEBIAN_10_64", 
                "ASIANUX_3", 
                "ASIANUX_3_64", 
                "ASIANUX_4", 
                "ASIANUX_4_64", 
                "ASIANUX_5_64", 
                "ASIANUX_7_64", 
                "OPENSUSE", 
                "OPENSUSE_64", 
                "FEDORA", 
                "FEDORA_64", 
                "COREOS_64", 
                "VMWARE_PHOTON_64", 
                "OTHER_24X_LINUX", 
                "OTHER_24X_LINUX_64", 
                "OTHER_26X_LINUX", 
                "OTHER_26X_LINUX_64", 
                "OTHER_3X_LINUX", 
                "OTHER_3X_LINUX_64", 
                "OTHER_LINUX", 
                "GENERIC_LINUX", 
                "OTHER_LINUX_64", 
                "SOLARIS_6", 
                "SOLARIS_7", 
                "SOLARIS_8", 
                "SOLARIS_9", 
                "SOLARIS_10", 
                "SOLARIS_10_64", 
                "SOLARIS_11_64", 
                "OS2", 
                "ECOMSTATION", 
                "ECOMSTATION_2", 
                "NETWARE_4", 
                "NETWARE_5", 
                "NETWARE_6", 
                "OPENSERVER_5", 
                "OPENSERVER_6", 
                "UNIXWARE_7", 
                "DARWIN", 
                "DARWIN_64", 
                "DARWIN_10", 
                "DARWIN_10_64", 
                "DARWIN_11", 
                "DARWIN_11_64", 
                "DARWIN_12_64", 
                "DARWIN_13_64", 
                "DARWIN_14_64", 
                "DARWIN_15_64", 
                "DARWIN_16_64", 
                "VMKERNEL", 
                "VMKERNEL_5", 
                "VMKERNEL_6", 
                "VMKERNEL_65", 
                "OTHER", 
                "OTHER_64"
            ], 
            "type": "string", 
            "description": "The GuestOS enumerated type defines the valid guest operating system types used for configuring a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.sata.create_spec": {
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "SATA bus number.\nIf unset, the server will choose an available bus number; if none is available, the request will fail.", 
                    "format": "int64"
                }, 
                "pci_slot_number": {
                    "type": "integer", 
                    "description": "Address of the SATA adapter on the PCI bus.\nIf unset, the server will choose an available address when the virtual machine is powered on.", 
                    "format": "int64"
                }, 
                "type": {
                    "description": "Adapter type.\nIf unset, a guest-specific default value will be used.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.sata.info": {
            "required": [
                "bus", 
                "type", 
                "label"
            ], 
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "SATA bus number.", 
                    "format": "int64"
                }, 
                "pci_slot_number": {
                    "type": "integer", 
                    "description": "Address of the SATA adapter on the PCI bus.\nMay be unset if the virtual machine has never been powered on since the adapter was created.", 
                    "format": "int64"
                }, 
                "type": {
                    "description": "Adapter type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata.type"
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.sata.summary": {
            "required": [
                "adapter"
            ], 
            "type": "object", 
            "properties": {
                "adapter": {
                    "type": "string", 
                    "description": "Identifier of the virtual SATA adapter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SataAdapter."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.sata.type": {
            "enum": [
                "AHCI"
            ], 
            "type": "string", 
            "description": "The Sata.Type enumerated type defines the valid emulation types for a virtual SATA adapter."
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.sata_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual SATA adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.sata.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi.create_spec": {
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "SCSI bus number.\nIf unset, the server will choose an available bus number; if none is available, the request will fail.", 
                    "format": "int64"
                }, 
                "pci_slot_number": {
                    "type": "integer", 
                    "description": "Address of the SCSI adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.\nIf unset, the server will choose an available address when the virtual machine is powered on.", 
                    "format": "int64"
                }, 
                "sharing": {
                    "description": "Bus sharing mode.\nIf unset, the adapter will default to NONE.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.sharing"
                }, 
                "type": {
                    "description": "Adapter type.\nIf unset, a guest-specific default value will be used.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi.info": {
            "required": [
                "scsi", 
                "sharing", 
                "type", 
                "label"
            ], 
            "type": "object", 
            "properties": {
                "scsi": {
                    "description": "Address of the SCSI adapter on the SCSI bus.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.scsi_address_info"
                }, 
                "sharing": {
                    "description": "Bus sharing mode.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.sharing"
                }, 
                "type": {
                    "description": "Adapter type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.type"
                }, 
                "pci_slot_number": {
                    "type": "integer", 
                    "description": "Address of the SCSI adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.\nMay be unset if the virtual machine has never been powered on since the adapter was created.", 
                    "format": "int64"
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi.sharing": {
            "enum": [
                "NONE", 
                "VIRTUAL", 
                "PHYSICAL"
            ], 
            "type": "string", 
            "description": "The Scsi.Sharing enumerated type defines the valid bus sharing modes for a virtual SCSI adapter."
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi.summary": {
            "required": [
                "adapter"
            ], 
            "type": "object", 
            "properties": {
                "adapter": {
                    "type": "string", 
                    "description": "Identifier of the virtual SCSI adapter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ScsiAdapter."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi.type": {
            "enum": [
                "BUSLOGIC", 
                "LSILOGIC", 
                "LSILOGICSAS", 
                "PVSCSI"
            ], 
            "type": "string", 
            "description": "The Scsi.Type enumerated type defines the valid emulation types for a virtual SCSI adapter."
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi.update_spec": {
            "type": "object", 
            "properties": {
                "sharing": {
                    "description": "Bus sharing mode. \n This field may only be modified if the virtual machine is not powered on.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.sharing"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual SCSI adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.adapter.scsi_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual SCSI adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.adapter.scsi.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot.create_spec": {
            "type": "object", 
            "properties": {
                "enter_setup_mode": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots. Note that this flag will automatically be reset to false once the virtual machine enters setup mode.\nIf unset, the value is unchanged."
                }, 
                "retry": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.\nIf unset, default value is false."
                }, 
                "efi_legacy_boot": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to use EFI legacy boot mode.\nIf unset, defaults to value that is recommended for the guest OS and is supported for the virtual hardware version."
                }, 
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.\nIf unset, defaults to a system defined default value.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.network_protocol"
                }, 
                "delay": {
                    "type": "integer", 
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on. This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.\nIf unset, default value is 0.", 
                    "format": "int64"
                }, 
                "retry_delay": {
                    "type": "integer", 
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when Boot.Info.retry is true.\nIf unset, default value is 10000.", 
                    "format": "int64"
                }, 
                "type": {
                    "description": "Firmware type to be used by the virtual machine.\nIf unset, defaults to value that is recommended for the guest OS and is supported for the virtual hardware version.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot.device.entry": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "nic": {
                    "type": "string", 
                    "description": "Virtual Ethernet device. Ethernet device to use as boot device for this entry.\nThis field is optional and it is only relevant when the value of Device.Entry.type is ETHERNET.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet."
                }, 
                "disks": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Virtual disk device. List of virtual disks in boot order.\nThis field is optional and it is only relevant when the value of Device.Entry.type is DISK.\nWhen clients pass a value of this structure as a parameter, the field must contain identifiers for the resource type: com.vmware.vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will contain identifiers for the resource type: com.vmware.vcenter.vm.hardware.Disk."
                }, 
                "type": {
                    "description": "Virtual device type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot.device.entry_create_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "description": "Virtual Boot device type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot.device.type": {
            "enum": [
                "CDROM", 
                "DISK", 
                "ETHERNET", 
                "FLOPPY"
            ], 
            "type": "string", 
            "description": "The Device.Type enumerated type defines the valid device types that may be used as bootable devices."
        }, 
        "com.vmware.vcenter.vm.hardware.boot.device_set": {
            "required": [
                "devices"
            ], 
            "type": "object", 
            "properties": {
                "devices": {
                    "items": {
                        "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.device.entry"
                    }, 
                    "type": "array", 
                    "description": "Ordered list of boot devices."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot.info": {
            "required": [
                "enter_setup_mode", 
                "retry", 
                "delay", 
                "retry_delay", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "enter_setup_mode": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the firmware boot process will automatically enter setup mode the next time the virtual machine boots. Note that this flag will automatically be reset to false once the virtual machine enters setup mode."
                }, 
                "retry": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual machine will automatically retry the boot process after a failure."
                }, 
                "efi_legacy_boot": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to use EFI legacy boot mode.\nThis field is optional and it is only relevant when the value of Boot.Info.type is EFI."
                }, 
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.\nThis field is optional and it is only relevant when the value of Boot.Info.type is EFI.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.network_protocol"
                }, 
                "delay": {
                    "type": "integer", 
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on. This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.", 
                    "format": "int64"
                }, 
                "retry_delay": {
                    "type": "integer", 
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when Boot.Info.retry is true.", 
                    "format": "int64"
                }, 
                "type": {
                    "description": "Firmware type used by the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot.network_protocol": {
            "enum": [
                "IPV4", 
                "IPV6"
            ], 
            "type": "string", 
            "description": "The Boot.NetworkProtocol enumerated type defines the valid network boot protocols supported when booting a virtual machine with EFI firmware over the network."
        }, 
        "com.vmware.vcenter.vm.hardware.boot.type": {
            "enum": [
                "BIOS", 
                "EFI"
            ], 
            "type": "string", 
            "description": "The Boot.Type enumerated type defines the valid firmware types for a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware.boot.update_spec": {
            "type": "object", 
            "properties": {
                "enter_setup_mode": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the firmware boot process should automatically enter setup mode the next time the virtual machine boots. Note that this flag will automatically be reset to false once the virtual machine enters setup mode.\nIf unset, the value is unchanged."
                }, 
                "retry": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual machine should automatically retry the boot process after a failure.\nIf unset, the value is unchanged."
                }, 
                "efi_legacy_boot": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to use EFI legacy boot mode.\nIf unset, the value is unchanged."
                }, 
                "network_protocol": {
                    "description": "Protocol to use when attempting to boot the virtual machine over the network.\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.network_protocol"
                }, 
                "delay": {
                    "type": "integer", 
                    "description": "Delay in milliseconds before beginning the firmware boot process when the virtual machine is powered on. This delay may be used to provide a time window for users to connect to the virtual machine console and enter BIOS setup mode.\nIf unset, the value is unchanged.", 
                    "format": "int64"
                }, 
                "retry_delay": {
                    "type": "integer", 
                    "description": "Delay in milliseconds before retrying the boot process after a failure; applicable only when Boot.Info.retry is true.\nIf unset, the value is unchanged.", 
                    "format": "int64"
                }, 
                "type": {
                    "description": "Firmware type to be used by the virtual machine.\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.boot_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the boot-related settings of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.boot.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.backing_info": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "iso_file": {
                    "type": "string", 
                    "description": "Path of the image file backing the virtual CD-ROM device.\nThis field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is ISO_FILE."
                }, 
                "host_device": {
                    "type": "string", 
                    "description": "Name of the host device backing the virtual CD-ROM device. \n\n\nThis field will be unset if Cdrom.BackingInfo.auto-detect is true and the virtual CD-ROM device is not connected or no suitable device is available on the host."
                }, 
                "type": {
                    "description": "Backing type for the virtual CD-ROM device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.backing_type"
                }, 
                "device_access_type": {
                    "description": "Access type for the device backing.\nThis field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is one of HOST_DEVICE or CLIENT_DEVICE.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.device_access_type"
                }, 
                "auto_detect": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual CD-ROM device is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Cdrom.BackingInfo.type is HOST_DEVICE."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.backing_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "iso_file": {
                    "type": "string", 
                    "description": "Path of the image file that should be used as the virtual CD-ROM device backing.\nThis field is optional and it is only relevant when the value of Cdrom.BackingSpec.type is ISO_FILE."
                }, 
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device that should be used as the virtual CD-ROM device backing.\nIf unset, the virtual CD-ROM device will be configured to automatically detect a suitable host device."
                }, 
                "type": {
                    "description": "Backing type for the virtual CD-ROM device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.backing_type"
                }, 
                "device_access_type": {
                    "description": "Access type for the device backing.\nIf unset, defaults to EMULATION.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.device_access_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.backing_type": {
            "enum": [
                "ISO_FILE", 
                "HOST_DEVICE", 
                "CLIENT_DEVICE"
            ], 
            "type": "string", 
            "description": "The Cdrom.BackingType enumerated type defines the valid backing types for a virtual CD-ROM device."
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.create_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device.\nIf unset, defaults to automatic detection of a suitable host device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.backing_spec"
                }, 
                "sata": {
                    "description": "Address for attaching the device to a virtual SATA adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.sata_address_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset."
                }, 
                "ide": {
                    "description": "Address for attaching the device to a virtual IDE adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ide_address_spec"
                }, 
                "type": {
                    "description": "Type of host bus adapter to which the device should be attached.\nIf unset, guest-specific default values will be used", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.host_bus_adapter_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.device_access_type": {
            "enum": [
                "EMULATION", 
                "PASSTHRU", 
                "PASSTHRU_EXCLUSIVE"
            ], 
            "type": "string", 
            "description": "The Cdrom.DeviceAccessType enumerated type defines the valid device access types for a physical device packing of a virtual CD-ROM device."
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.host_bus_adapter_type": {
            "enum": [
                "IDE", 
                "SATA"
            ], 
            "type": "string", 
            "description": "The Cdrom.HostBusAdapterType enumerated type defines the valid types of host bus adapters that may be used for attaching a Cdrom to a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.info": {
            "required": [
                "backing", 
                "label", 
                "state", 
                "start_connected", 
                "allow_guest_control", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.backing_info"
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }, 
                "sata": {
                    "description": "Address of device attached to a virtual SATA adapter.\nThis field is optional and it is only relevant when the value of Cdrom.Info.type is SATA.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.sata_address_info"
                }, 
                "state": {
                    "description": "Connection status of the virtual device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.connection_state"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device."
                }, 
                "ide": {
                    "description": "Address of device attached to a virtual IDE adapter.\nThis field is optional and it is only relevant when the value of Cdrom.Info.type is IDE.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ide_address_info"
                }, 
                "type": {
                    "description": "Type of host bus adapter to which the device is attached.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.host_bus_adapter_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.summary": {
            "required": [
                "cdrom"
            ], 
            "type": "object", 
            "properties": {
                "cdrom": {
                    "type": "string", 
                    "description": "Identifier of the virtual CD-ROM device.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Cdrom."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom.update_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual CD-ROM device. \n This field may only be modified if the virtual machine is not powered on or the virtual CD-ROM device is not connected.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual CD-ROM device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cdrom_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual CD-ROM device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cdrom.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.connection_state": {
            "enum": [
                "CONNECTED", 
                "RECOVERABLE_ERROR", 
                "UNRECOVERABLE_ERROR", 
                "NOT_CONNECTED", 
                "UNKNOWN"
            ], 
            "type": "string", 
            "description": "The ConnectionState enumerated type defines the valid states for a removable device that is configured to be connected."
        }, 
        "com.vmware.vcenter.vm.hardware.cpu.info": {
            "required": [
                "count", 
                "hot_add_enabled", 
                "hot_remove_enabled", 
                "cores_per_socket"
            ], 
            "type": "object", 
            "properties": {
                "count": {
                    "type": "integer", 
                    "description": "Number of CPU cores.", 
                    "format": "int64"
                }, 
                "hot_add_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled."
                }, 
                "hot_remove_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled."
                }, 
                "cores_per_socket": {
                    "type": "integer", 
                    "description": "Number of CPU cores per socket.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cpu.update_spec": {
            "type": "object", 
            "properties": {
                "count": {
                    "type": "integer", 
                    "description": "New number of CPU cores. The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket. \n The supported range of CPU counts is constrained by the configured guest operating system and virtual hardware version of the virtual machine. \n\n If the virtual machine is running, the number of CPU cores may only be increased if Cpu.Info.hot-add-enabled is true, and may only be decreased if Cpu.Info.hot-remove-enabled is true.\n\nIf unset, the value is unchanged.", 
                    "format": "int64"
                }, 
                "hot_add_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether adding CPUs while the virtual machine is running is enabled. \n This field may only be modified if the virtual machine is powered off.\n\nIf unset, the value is unchanged."
                }, 
                "hot_remove_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether removing CPUs while the virtual machine is running is enabled. \n This field may only be modified if the virtual machine is powered off.\n\nIf unset, the value is unchanged."
                }, 
                "cores_per_socket": {
                    "type": "integer", 
                    "description": "New number of CPU cores per socket. The number of CPU cores in the virtual machine must be a multiple of the number of cores per socket.\nIf unset, the value is unchanged.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.cpu_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the CPU-related settings of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.cpu.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.backing_info": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "vmdk_file": {
                    "type": "string", 
                    "description": "Path of the VMDK file backing the virtual disk.\nThis field is optional and it is only relevant when the value of Disk.BackingInfo.type is VMDK_FILE."
                }, 
                "type": {
                    "description": "Backing type for the virtual disk.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.backing_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.backing_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "vmdk_file": {
                    "type": "string", 
                    "description": "Path of the VMDK file backing the virtual disk.\nThis field is optional and it is only relevant when the value of Disk.BackingSpec.type is VMDK_FILE."
                }, 
                "type": {
                    "description": "Backing type for the virtual disk.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.backing_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.backing_type": {
            "enum": [
                "VMDK_FILE"
            ], 
            "type": "string", 
            "description": "The Disk.BackingType enumerated type defines the valid backing types for a virtual disk."
        }, 
        "com.vmware.vcenter.vm.hardware.disk.create_spec": {
            "type": "object", 
            "properties": {
                "new_vmdk": {
                    "description": "Specification for creating a new VMDK backing for the virtual disk. Exactly one of Disk.CreateSpec.backing or Disk.CreateSpec.new-vmdk must be specified.\nIf unset, a new VMDK backing will not be created.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.vmdk_create_spec"
                }, 
                "backing": {
                    "description": "Existing physical resource backing for the virtual disk. Exactly one of Disk.CreateSpec.backing or Disk.CreateSpec.new-vmdk must be specified.\nIf unset, the virtual disk will not be connected to an existing backing.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.backing_spec"
                }, 
                "sata": {
                    "description": "Address for attaching the device to a virtual SATA adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.sata_address_spec"
                }, 
                "scsi": {
                    "description": "Address for attaching the device to a virtual SCSI adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.scsi_address_spec"
                }, 
                "ide": {
                    "description": "Address for attaching the device to a virtual IDE adapter.\nIf unset, the server will choose an available address; if none is available, the request will fail.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ide_address_spec"
                }, 
                "type": {
                    "description": "Type of host bus adapter to which the device should be attached.\nIf unset, guest-specific default values will be used", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.host_bus_adapter_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.host_bus_adapter_type": {
            "enum": [
                "IDE", 
                "SCSI", 
                "SATA"
            ], 
            "type": "string", 
            "description": "The Disk.HostBusAdapterType enumerated type defines the valid types of host bus adapters that may be used for attaching a virtual storage device to a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware.disk.info": {
            "required": [
                "backing", 
                "label", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "capacity": {
                    "type": "integer", 
                    "description": "Capacity of the virtual disk in bytes.\nIf unset, virtual disk is inaccessible or disk capacity is 0.", 
                    "format": "int64"
                }, 
                "backing": {
                    "description": "Physical resource backing for the virtual disk.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.backing_info"
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }, 
                "sata": {
                    "description": "Address of device attached to a virtual SATA adapter.\nWorkaround for PR1459646", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.sata_address_info"
                }, 
                "scsi": {
                    "description": "Address of device attached to a virtual SCSI adapter.\nWorkaround for PR1459646", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.scsi_address_info"
                }, 
                "ide": {
                    "description": "Address of device attached to a virtual IDE adapter.\nWorkaround for PR1459646", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ide_address_info"
                }, 
                "type": {
                    "description": "Type of host bus adapter to which the device is attached.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.host_bus_adapter_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.summary": {
            "required": [
                "disk"
            ], 
            "type": "object", 
            "properties": {
                "disk": {
                    "type": "string", 
                    "description": "Identifier of the virtual Disk.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Disk."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.update_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual disk. \n This field may only be modified if the virtual machine is not powered on.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.backing_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk.vmdk_create_spec": {
            "type": "object", 
            "properties": {
                "capacity": {
                    "type": "integer", 
                    "description": "Capacity of the virtual disk backing in bytes.\nIf unset, defaults to a guest-specific capacity.", 
                    "format": "int64"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Base name of the VMDK file. The name should not include the '.vmdk' file extension.\nIf unset, a name (derived from the name of the virtual machine) will be chosen by the server."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual disk.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.disk_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual disk.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.disk.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.backing_info": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device backing the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is HOST_DEVICE."
                }, 
                "network": {
                    "type": "string", 
                    "description": "Identifier of the network backing the virtual Ethernet adapter.\nIf unset, the identifier of the network backing could not be determined.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network."
                }, 
                "type": {
                    "description": "Backing type for the virtual Ethernet adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.backing_type"
                }, 
                "distributed_switch_uuid": {
                    "type": "string", 
                    "description": "UUID of the distributed virtual switch that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is DISTRIBUTED_PORTGROUP."
                }, 
                "distributed_port": {
                    "type": "string", 
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter.\nThis field will be unset if the virtual Ethernet device is not bound to a distributed virtual port; this can happen if the virtual machine is powered off or the virtual Ethernet device is not connected."
                }, 
                "connection_cookie": {
                    "type": "integer", 
                    "description": "Server-generated cookie that identifies the connection to the port. This ookie may be used to verify that the virtual machine is the rightful owner of the port.\nThis field will be unset if the virtual Ethernet device is not bound to a distributed virtual port; this can happen if the virtual machine is powered off or the virtual Ethernet device is not connected.", 
                    "format": "int64"
                }, 
                "opaque_network_id": {
                    "type": "string", 
                    "description": "Identifier of the opaque network that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is OPAQUE_NETWORK."
                }, 
                "network_name": {
                    "type": "string", 
                    "description": "Name of the standard portgroup backing the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is STANDARD_PORTGROUP."
                }, 
                "opaque_network_type": {
                    "type": "string", 
                    "description": "Type of the opaque network that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingInfo.type is OPAQUE_NETWORK."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.backing_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "distributed_port": {
                    "type": "string", 
                    "description": "Key of the distributed virtual port that backs the virtual Ethernet adapter. Depending on the type of the Portgroup, the port may be specified using this field. If the portgroup type is early-binding (also known as static), a port is assigned when the Ethernet adapter is configured to use the port. The port may be either automatically or specifically assigned based on the value of this field. If the portgroup type is ephemeral, the port is created and assigned to a virtual machine when it is powered on and the Ethernet adapter is connected. This field cannot be specified as no free ports exist before use.\nMay be used to specify a port when the network specified on the Ethernet.BackingSpec.network field is a static or early binding distributed portgroup. If unset, the port will be automatically assigned to the Ethernet adapter based on the policy embodied by the portgroup type."
                }, 
                "type": {
                    "description": "Backing type for the virtual Ethernet adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.backing_type"
                }, 
                "network": {
                    "type": "string", 
                    "description": "Identifier of the network that backs the virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.BackingSpec.type is one of STANDARD_PORTGROUP, DISTRIBUTED_PORTGROUP, or OPAQUE_NETWORK.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: Network. When operations return a value of this structure as a result, the field will be an identifier for the resource type: Network."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.backing_type": {
            "enum": [
                "STANDARD_PORTGROUP", 
                "HOST_DEVICE", 
                "DISTRIBUTED_PORTGROUP", 
                "OPAQUE_NETWORK"
            ], 
            "type": "string", 
            "description": "The Ethernet.BackingType enumerated type defines the valid backing types for a virtual Ethernet adapter."
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.create_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter.\nIf unset, the system may try to find an appropriate backing. If one is not found, the request will fail.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.backing_spec"
                }, 
                "pci_slot_number": {
                    "type": "integer", 
                    "description": "Address of the virtual Ethernet adapter on the PCI bus. If the PCI address is invalid, the server will change when it the VM is started or as the device is hot added.\nIf unset, the server will choose an available address when the virtual machine is powered on.", 
                    "format": "int64"
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset."
                }, 
                "mac_type": {
                    "description": "MAC address type.\nIf unset, defaults to GENERATED.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.mac_address_type"
                }, 
                "upt_compatibility_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.\nIf unset, defaults to false."
                }, 
                "wake_on_lan_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter.\nDefaults to false if unset."
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset."
                }, 
                "mac_address": {
                    "type": "string", 
                    "description": "MAC address.\nWorkaround for PR1459647"
                }, 
                "type": {
                    "description": "Ethernet adapter emulation type.\nIf unset, defaults to a guest-specific type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.emulation_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.emulation_type": {
            "enum": [
                "E1000", 
                "E1000E", 
                "PCNET32", 
                "VMXNET", 
                "VMXNET2", 
                "VMXNET3"
            ], 
            "type": "string", 
            "description": "The Ethernet.EmulationType enumerated type defines the valid emulation types for a virtual Ethernet adapter."
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.info": {
            "required": [
                "backing", 
                "allow_guest_control", 
                "mac_type", 
                "wake_on_lan_enabled", 
                "state", 
                "start_connected", 
                "label", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.backing_info"
                }, 
                "pci_slot_number": {
                    "type": "integer", 
                    "description": "Address of the virtual Ethernet adapter on the PCI bus. If the PCI address is invalid, the server will change it when the VM is started or as the device is hot added.\nMay be unset if the virtual machine has never been powered on since the adapter was created.", 
                    "format": "int64"
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device."
                }, 
                "mac_type": {
                    "description": "MAC address type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.mac_address_type"
                }, 
                "upt_compatibility_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility is enabled on this virtual Ethernet adapter.\nThis field is optional and it is only relevant when the value of Ethernet.Info.type is VMXNET3."
                }, 
                "wake_on_lan_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether wake-on-LAN is enabled on this virtual Ethernet adapter."
                }, 
                "state": {
                    "description": "Connection status of the virtual device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.connection_state"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on."
                }, 
                "mac_address": {
                    "type": "string", 
                    "description": "MAC address.\nMay be unset if Ethernet.Info.mac-type is MANUAL and has not been specified, or if Ethernet.Info.mac-type is GENERATED and the virtual machine has never been powered on since the Ethernet adapter was created."
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }, 
                "type": {
                    "description": "Ethernet adapter emulation type.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.emulation_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.mac_address_type": {
            "enum": [
                "MANUAL", 
                "GENERATED", 
                "ASSIGNED"
            ], 
            "type": "string", 
            "description": "The Ethernet.MacAddressType enumerated type defines the valid MAC address origins for a virtual Ethernet adapter."
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.summary": {
            "required": [
                "nic"
            ], 
            "type": "object", 
            "properties": {
                "nic": {
                    "type": "string", 
                    "description": "Identifier of the virtual Ethernet adapter.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Ethernet."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet.update_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual Ethernet adapter. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.backing_spec"
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged."
                }, 
                "mac_type": {
                    "description": "MAC address type. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.mac_address_type"
                }, 
                "upt_compatibility_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether Universal Pass-Through (UPT) compatibility should be enabled on this virtual Ethernet adapter. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged. Must be unset if the emulation type of the virtual Ethernet adapter is not VMXNET3."
                }, 
                "wake_on_lan_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether wake-on-LAN shoud be enabled on this virtual Ethernet adapter. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged."
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged."
                }, 
                "mac_address": {
                    "type": "string", 
                    "description": "MAC address. \n This field may be modified at any time, and changes will be applied the next time the virtual machine is powered on.\n\nIf unset, the value is unchanged. Must be specified if Ethernet.UpdateSpec.mac-type is MANUAL. Must be unset if the MAC address type is not MANUAL."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual Ethernet adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ethernet_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual Ethernet adapter.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.ethernet.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.backing_info": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the host device backing the virtual floppy drive. \n\n\nThis field will be unset if Floppy.BackingInfo.auto-detect is true and the virtual floppy drive is not connected or no suitable device is available on the host."
                }, 
                "image_file": {
                    "type": "string", 
                    "description": "Path of the image file backing the virtual floppy drive.\nThis field is optional and it is only relevant when the value of Floppy.BackingInfo.type is IMAGE_FILE."
                }, 
                "type": {
                    "description": "Backing type for the virtual floppy drive.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.backing_type"
                }, 
                "auto_detect": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual floppy drive is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Floppy.BackingInfo.type is HOST_DEVICE."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.backing_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device that should be used as the virtual floppy drive backing.\nIf unset, the virtual floppy drive will be configured to automatically detect a suitable host device."
                }, 
                "image_file": {
                    "type": "string", 
                    "description": "Path of the image file that should be used as the virtual floppy drive backing.\nThis field is optional and it is only relevant when the value of Floppy.BackingSpec.type is IMAGE_FILE."
                }, 
                "type": {
                    "description": "Backing type for the virtual floppy drive.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.backing_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.backing_type": {
            "enum": [
                "IMAGE_FILE", 
                "HOST_DEVICE", 
                "CLIENT_DEVICE"
            ], 
            "type": "string", 
            "description": "The Floppy.BackingType enumerated type defines the valid backing types for a virtual floppy drive."
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.create_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive.\nIf unset, defaults to automatic detection of a suitable host device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.info": {
            "required": [
                "backing", 
                "state", 
                "start_connected", 
                "allow_guest_control", 
                "label"
            ], 
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.backing_info"
                }, 
                "state": {
                    "description": "Connection status of the virtual device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.connection_state"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device."
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.summary": {
            "required": [
                "floppy"
            ], 
            "type": "object", 
            "properties": {
                "floppy": {
                    "type": "string", 
                    "description": "Identifier of the virtual floppy drive.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.Floppy."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy.update_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual floppy drive. \n This field may only be modified if the virtual machine is not powered on or the virtual floppy drive is not connected.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual floppy drive.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.floppy_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual floppy drive.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.floppy.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ide_address_info": {
            "required": [
                "master", 
                "primary"
            ], 
            "type": "object", 
            "properties": {
                "master": {
                    "type": "boolean", 
                    "description": "Flag specifying whether the device is the master or slave device on the IDE adapter."
                }, 
                "primary": {
                    "type": "boolean", 
                    "description": "Flag specifying whether the device is attached to the primary or secondary IDE adapter of the virtual machine."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.ide_address_spec": {
            "type": "object", 
            "properties": {
                "master": {
                    "type": "boolean", 
                    "description": "Flag specifying whether the device should be the master or slave device on the IDE adapter.\nIf unset, the server will choose an available connection type. If no IDE connections are available, the request will be rejected."
                }, 
                "primary": {
                    "type": "boolean", 
                    "description": "Flag specifying whether the device should be attached to the primary or secondary IDE adapter of the virtual machine.\nIf unset, the server will choose a adapter with an available connection. If no IDE connections are available, the request will be rejected."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.info": {
            "required": [
                "version", 
                "upgrade_status", 
                "upgrade_policy"
            ], 
            "type": "object", 
            "properties": {
                "upgrade_error": {
                    "type": "any_error", 
                    "description": "Reason for the scheduled upgrade failure.\nThis field is optional and it is only relevant when the value of Hardware.Info.upgrade-status is FAILED."
                }, 
                "version": {
                    "description": "Virtual hardware version.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.version"
                }, 
                "upgrade_status": {
                    "description": "Scheduled upgrade status.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.upgrade_status"
                }, 
                "upgrade_version": {
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade.\nThis field is optional and it is only relevant when the value of Hardware.Info.upgrade-policy is one of AFTER_CLEAN_SHUTDOWN or ALWAYS.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.version"
                }, 
                "upgrade_policy": {
                    "description": "Scheduled upgrade policy.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.upgrade_policy"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.memory.info": {
            "required": [
                "hot_add_enabled", 
                "size_MiB"
            ], 
            "type": "object", 
            "properties": {
                "hot_add_increment_size_MiB": {
                    "type": "integer", 
                    "description": "The granularity, in mebibytes, at which memory can be added to a running virtual machine. \n When adding memory to a running virtual machine, the amount of memory added must be at least Memory.Info.hot-add-increment-size-mib and the total memory size of the virtual machine must be a multiple of {@link>hotAddIncrementSize}.\n\nOnly set when Memory.Info.hot-add-enabled is true and the virtual machine is running.", 
                    "format": "int64"
                }, 
                "hot_add_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether adding memory while the virtual machine is running is enabled. \n Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running.\n"
                }, 
                "hot_add_limit_MiB": {
                    "type": "integer", 
                    "description": "The maximum amount of memory, in mebibytes, that can be added to a running virtual machine.\nOnly set when Memory.Info.hot-add-enabled is true and the virtual machine is running.", 
                    "format": "int64"
                }, 
                "size_MiB": {
                    "type": "integer", 
                    "description": "Memory size in mebibytes.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.memory.update_spec": {
            "type": "object", 
            "properties": {
                "hot_add_enabled": {
                    "type": "boolean", 
                    "description": "Flag indicating whether adding memory while the virtual machine is running should be enabled. \n Some guest operating systems may consume more resources or perform less efficiently when they run on hardware that supports adding memory while the machine is running. \n\n This field may only be modified if the virtual machine is not powered on.\n\nIf unset, the value is unchanged."
                }, 
                "size_MiB": {
                    "type": "integer", 
                    "description": "New memory size in mebibytes. \n The supported range of memory sizes is constrained by the configured guest operating system and virtual hardware version of the virtual machine. \n\n If the virtual machine is running, this value may only be changed if Memory.Info.hot-add-enabled is true, and the new memory size must satisfy the constraints specified by Memory.Info.hot-add-increment-size-mib and Memory.Info.hot-add-limit-mib.\n\nIf unset, the value is unchanged.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.memory_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the memory-related settings of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.memory.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.backing_info": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device backing the virtual parallel port. \n\n\nThis field will be unset if Parallel.BackingInfo.auto-detect is true and the virtual parallel port is not connected or no suitable device is available on the host."
                }, 
                "type": {
                    "description": "Backing type for the virtual parallel port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.backing_type"
                }, 
                "auto_detect": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual parallel port is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Parallel.BackingInfo.type is HOST_DEVICE."
                }, 
                "file": {
                    "type": "string", 
                    "description": "Path of the file backing the virtual parallel port.\nThis field is optional and it is only relevant when the value of Parallel.BackingInfo.type is FILE."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.backing_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device that should be used as the virtual parallel port backing.\nIf unset, the virtual parallel port will be configured to automatically detect a suitable host device."
                }, 
                "type": {
                    "description": "Backing type for the virtual parallel port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.backing_type"
                }, 
                "file": {
                    "type": "string", 
                    "description": "Path of the file that should be used as the virtual parallel port backing.\nThis field is optional and it is only relevant when the value of Parallel.BackingSpec.type is FILE."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.backing_type": {
            "enum": [
                "FILE", 
                "HOST_DEVICE"
            ], 
            "type": "string", 
            "description": "The Parallel.BackingType enumerated type defines the valid backing types for a virtual parallel port."
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.create_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port.\nIf unset, defaults to automatic detection of a suitable host device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.info": {
            "required": [
                "backing", 
                "state", 
                "start_connected", 
                "allow_guest_control", 
                "label"
            ], 
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.backing_info"
                }, 
                "state": {
                    "description": "Connection status of the virtual device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.connection_state"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device."
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.summary": {
            "required": [
                "port"
            ], 
            "type": "object", 
            "properties": {
                "port": {
                    "type": "string", 
                    "description": "Identifier of the virtual parallel port.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.ParallelPort."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel.update_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual parallel port. \n This field may only be modified if the virtual machine is not powered on or the virtual parallel port is not connected.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual parallel port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.parallel_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual parallel port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.parallel.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.sata_address_info": {
            "required": [
                "bus", 
                "unit"
            ], 
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "Bus number of the adapter to which the device is attached.", 
                    "format": "int64"
                }, 
                "unit": {
                    "type": "integer", 
                    "description": "Unit number of the device.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.sata_address_spec": {
            "required": [
                "bus"
            ], 
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "Bus number of the adapter to which the device should be attached.", 
                    "format": "int64"
                }, 
                "unit": {
                    "type": "integer", 
                    "description": "Unit number of the device.\nIf unset, the server will choose an available unit number on the specified adapter. If there are no available connections on the adapter, the request will be rejected.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.scsi_address_info": {
            "required": [
                "bus", 
                "unit"
            ], 
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "Bus number of the adapter to which the device is attached.", 
                    "format": "int64"
                }, 
                "unit": {
                    "type": "integer", 
                    "description": "Unit number of the device.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.scsi_address_spec": {
            "required": [
                "bus"
            ], 
            "type": "object", 
            "properties": {
                "bus": {
                    "type": "integer", 
                    "description": "Bus number of the adapter to which the device should be attached.", 
                    "format": "int64"
                }, 
                "unit": {
                    "type": "integer", 
                    "description": "Unit number of the device.\nIf unset, the server will choose an available unit number on the specified adapter. If there are no available connections on the adapter, the request will be rejected.", 
                    "format": "int64"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial.backing_info": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device backing the virtual serial port. \n\n\nThis field will be unset if Serial.BackingInfo.auto-detect is true and the virtual serial port is not connected or no suitable device is available on the host."
                }, 
                "file": {
                    "type": "string", 
                    "description": "Path of the file backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is FILE."
                }, 
                "pipe": {
                    "type": "string", 
                    "description": "Name of the pipe backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is one of PIPE_SERVER or PIPE_CLIENT."
                }, 
                "proxy": {
                    "type": "uri", 
                    "description": "Proxy service that provides network access to the network backing. If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.\nIf unset, no proxy service is configured."
                }, 
                "auto_detect": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual serial port is configured to automatically detect a suitable host device.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is HOST_DEVICE."
                }, 
                "network_location": {
                    "type": "uri", 
                    "description": "URI specifying the location of the network service backing the virtual serial port. \n   - If Serial.BackingInfo.type is NETWORK_SERVER, this field is the location used by clients to connect to this server. The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.\n   - If Serial.BackingInfo.type is NETWORK_CLIENT, this field is the location used by the virtual machine to connect to the remote server.\n \nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is one of NETWORK_SERVER or NETWORK_CLIENT."
                }, 
                "no_rx_loss": {
                    "type": "boolean", 
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun. This allows the virtual machine to read all of the data transferred over the pipe with no data loss.\nThis field is optional and it is only relevant when the value of Serial.BackingInfo.type is one of PIPE_SERVER or PIPE_CLIENT."
                }, 
                "type": {
                    "description": "Backing type for the virtual serial port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.backing_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial.backing_spec": {
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "host_device": {
                    "type": "string", 
                    "description": "Name of the device backing the virtual serial port. \n\n\nIf unset, the virtual serial port will be configured to automatically detect a suitable host device."
                }, 
                "pipe": {
                    "type": "string", 
                    "description": "Name of the pipe backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingSpec.type is one of PIPE_SERVER or PIPE_CLIENT."
                }, 
                "proxy": {
                    "type": "uri", 
                    "description": "Proxy service that provides network access to the network backing. If set, the virtual machine initiates a connection with the proxy service and forwards the traffic to the proxy.\nIf unset, no proxy service should be used."
                }, 
                "file": {
                    "type": "string", 
                    "description": "Path of the file backing the virtual serial port.\nThis field is optional and it is only relevant when the value of Serial.BackingSpec.type is FILE."
                }, 
                "network_location": {
                    "type": "uri", 
                    "description": "URI specifying the location of the network service backing the virtual serial port. \n   - If Serial.BackingSpec.type is NETWORK_SERVER, this field is the location used by clients to connect to this server. The hostname part of the URI should either be empty or should specify the address of the host on which the virtual machine is running.\n   - If Serial.BackingSpec.type is NETWORK_CLIENT, this field is the location used by the virtual machine to connect to the remote server.\n \nThis field is optional and it is only relevant when the value of Serial.BackingSpec.type is one of NETWORK_SERVER or NETWORK_CLIENT."
                }, 
                "no_rx_loss": {
                    "type": "boolean", 
                    "description": "Flag that enables optimized data transfer over the pipe. When the value is true, the host buffers data to prevent data overrun. This allows the virtual machine to read all of the data transferred over the pipe with no data loss.\nIf unset, defaults to false."
                }, 
                "type": {
                    "description": "Backing type for the virtual serial port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.backing_type"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial.backing_type": {
            "enum": [
                "FILE", 
                "HOST_DEVICE", 
                "PIPE_SERVER", 
                "PIPE_CLIENT", 
                "NETWORK_SERVER", 
                "NETWORK_CLIENT"
            ], 
            "type": "string", 
            "description": "The Serial.BackingType enumerated type defines the valid backing types for a virtual serial port."
        }, 
        "com.vmware.vcenter.vm.hardware.serial.create_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual serial port.\nIf unset, defaults to automatic detection of a suitable host device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nDefaults to false if unset."
                }, 
                "yield_on_poll": {
                    "type": "boolean", 
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host.\nIf unset, defaults to false."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nDefaults to false if unset."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial.info": {
            "required": [
                "backing", 
                "label", 
                "state", 
                "start_connected", 
                "allow_guest_control", 
                "yield_on_poll"
            ], 
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual serial port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.backing_info"
                }, 
                "label": {
                    "type": "string", 
                    "description": "Device label."
                }, 
                "state": {
                    "description": "Connection status of the virtual device.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.connection_state"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device."
                }, 
                "yield_on_poll": {
                    "type": "boolean", 
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial.summary": {
            "required": [
                "port"
            ], 
            "type": "object", 
            "properties": {
                "port": {
                    "type": "string", 
                    "description": "Identifier of the virtual serial port.\nWhen clients pass a value of this structure as a parameter, the field must be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort. When operations return a value of this structure as a result, the field will be an identifier for the resource type: com.vmware.vcenter.vm.hardware.SerialPort."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial.update_spec": {
            "type": "object", 
            "properties": {
                "backing": {
                    "description": "Physical resource backing for the virtual serial port. \n This field may only be modified if the virtual machine is not powered on or the virtual serial port is not connected.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.backing_spec"
                }, 
                "start_connected": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual device should be connected whenever the virtual machine is powered on.\nIf unset, the value is unchanged."
                }, 
                "yield_on_poll": {
                    "type": "boolean", 
                    "description": "CPU yield behavior. If set to true, the virtual machine will periodically relinquish the processor if its sole task is polling the virtual serial port. The amount of time it takes to regain the processor will depend on the degree of other virtual machine activity on the host. \n This field may be modified at any time, and changes applied to a connected virtual serial port take effect immediately.\n\nIf unset, the value is unchanged."
                }, 
                "allow_guest_control": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the guest can connect and disconnect the device.\nIf unset, the value is unchanged."
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial_create": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for the new virtual serial port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.create_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.serial_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual serial port.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.serial.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.update_spec": {
            "type": "object", 
            "properties": {
                "upgrade_version": {
                    "description": "Target hardware version to be used on the next scheduled virtual hardware upgrade. \n If specified, this field must represent a newer virtual hardware version than the current virtual hardware version reported in Hardware.Info.version.\n\nIf Hardware.UpdateSpec.upgrade-policy is set to NEVER, this field must be unset. Otherwise, if this field is unset, default to the most recent virtual hardware version supported by the server.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.version"
                }, 
                "upgrade_policy": {
                    "description": "Scheduled upgrade policy. \n If set to NEVER, the Hardware.Info.upgrade-version field will be reset to unset.\n\nIf unset, the value is unchanged.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.upgrade_policy"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware.upgrade_policy": {
            "enum": [
                "NEVER", 
                "AFTER_CLEAN_SHUTDOWN", 
                "ALWAYS"
            ], 
            "type": "string", 
            "description": "The Hardware.UpgradePolicy enumerated type defines the valid virtual hardware upgrade policies for a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware.upgrade_status": {
            "enum": [
                "NONE", 
                "PENDING", 
                "SUCCESS", 
                "FAILED"
            ], 
            "type": "string", 
            "description": "The Hardware.UpgradeStatus enumerated type defines the valid virtual hardware upgrade statuses for a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware.version": {
            "enum": [
                "VMX_03", 
                "VMX_04", 
                "VMX_06", 
                "VMX_07", 
                "VMX_08", 
                "VMX_09", 
                "VMX_10", 
                "VMX_11", 
                "VMX_12", 
                "VMX_13"
            ], 
            "type": "string", 
            "description": "The Hardware.Version enumerated type defines the valid virtual hardware versions for a virtual machine."
        }, 
        "com.vmware.vcenter.vm.hardware_update": {
            "required": [
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "description": "Specification for updating the virtual hardware settings of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.update_spec"
                }
            }
        }, 
        "com.vmware.vcenter.vm.hardware_upgrade": {
            "type": "object", 
            "properties": {
                "version": {
                    "description": "New virtual machine version.\nIf unset, defaults to the most recent virtual hardware version supported by the server.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.hardware.version"
                }
            }
        }, 
        "com.vmware.vcenter.vm.power.info": {
            "required": [
                "state"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "description": "Power state of the virtual machine.", 
                    "$ref": "#/definitions/com.vmware.vcenter.vm.power.state"
                }, 
                "clean_power_off": {
                    "type": "boolean", 
                    "description": "Flag indicating whether the virtual machine was powered off cleanly. This field may be used to detect that the virtual machine crashed unexpectedly and should be restarted.\nThis field is optional and it is only relevant when the value of Power.Info.state is POWERED_OFF."
                }
            }
        }, 
        "com.vmware.vcenter.vm.power.state": {
            "enum": [
                "POWERED_OFF", 
                "POWERED_ON", 
                "SUSPENDED"
            ], 
            "type": "string", 
            "description": "The Power.State enumerated type defines the valid power states for a virtual machine."
        }
    }, 
    "swagger": "2.0", 
    "externalDocs": {}
}